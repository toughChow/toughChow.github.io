<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java面试题小记</title>
    <url>/2018/12/12/interview/JavaInterview-Day1/</url>
    <content><![CDATA[<ol>
<li><p><code>short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗？</code></p>
<p>答：对于short s1 = 1; s1 = s1 + 1;由于1是int类型，因此s1+1运算结果也是int 型，需要强制转换类型才能赋值给short型。而short s1 = 1; s1 += 1;可以正确编译，因为s1+= 1;相当于s1 = (short)(s1 + 1);其中有隐含的强制类型转换。</p>
</li>
<li><p><code>输出如下代码结果</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer f1 = <span class="number">100</span>, f2 = <span class="number">100</span>, f3 = <span class="number">150</span>, f4 = <span class="number">150</span>;</span><br><span class="line">        System.out.println(f1 == f2);</span><br><span class="line">        System.out.println(f3 == f4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答案：true false（参见<code>Integer.valueOf()源码</code></p>
</li>
<li><p><code>&amp;和&amp;&amp;的区别？</code></p>
<p>&amp;运算符有两种用法：(1)<code>按位与</code>；(2)<code>逻辑与</code>。&amp;&amp;运算符是<code>短路与</code>运算。<code>短路与</code>指如果&amp;&amp;左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试题小记2</title>
    <url>/2018/12/29/interview/JavaInterview-Day2/</url>
    <content><![CDATA[<p>1.<code>抽象的（abstract）方法是否可同时是静态的（static）,是否可同时是本地方法（native），是否可同时被synchronized修饰？</code></p>
<p>​    不能。抽象方法需要子类重写，而静态的方法是无法被重写的，因此二者是矛盾的。本地方法是由本地代码（如C代码）实现的方法，而抽象方法是没有实现的，也是矛盾的。<code>synchronized</code>和方法的实现细节有关，抽象方法不涉及实现细节，因此也是相互矛盾的。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/05/31/Java/Basic/Basic1/</url>
    <content><![CDATA[<p>title: 十进制-十六进制转换问题<br>tags: Basic<br>categories: [‘Java’]<br>date: 2021/05/31</p>
<h1 id="面向对象和面向过程的区别"><a href="#面向对象和面向过程的区别" class="headerlink" title="面向对象和面向过程的区别"></a>面向对象和面向过程的区别</h1><h2 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>没有面向对象易维护、易复用、易扩展</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p>易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护</p>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>性能没有面向过程好</p>
<h1 id="Java特性"><a href="#Java特性" class="headerlink" title="Java特性"></a>Java特性</h1><p>简单易学、面向对象、平台无关性、可靠性、安全性、支持多线程、支持网络编程、编译与解释并存</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法。</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p>
<p>在 Java 中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）</p>
<h1 id="JVM-VS-JDK-VS-JRE"><a href="#JVM-VS-JDK-VS-JRE" class="headerlink" title="JVM VS JDK VS JRE"></a>JVM VS JDK VS JRE</h1><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p><code>Java Virtual Machine</code>是运行Java<code>字节码</code>的虚拟机</p>
<h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p>在Java中，JVM可以理解的代码就叫做<code>字节码</code>（扩展名为<code>.class</code>的文件），它不面向任何特定的处理器，只面向虚拟机。</p>
<h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>JDK 是 Java Development Kit，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。</p>
<h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><p>JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，</p>
<p>包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。</p>
<h1 id="Java-VS-C"><a href="#Java-VS-C" class="headerlink" title="Java VS C++"></a>Java VS C++</h1><ul>
<li>都是面向对象的语言，都支持封装、继承和多态</li>
<li>Java 不提供指针来直接访问内存，程序内存更加安全</li>
<li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li>
<li>Java 有自动内存管理机制，不需要程序员手动释放无用内存</li>
</ul>
<h1 id="字符型常量-VS-字符串常量"><a href="#字符型常量-VS-字符串常量" class="headerlink" title="字符型常量 VS 字符串常量"></a>字符型常量 VS 字符串常量</h1><ol>
<li>形式上: 字符常量是单引号引起的一个字符；字符串常量是双引号引起的若干个字符</li>
<li>含义上: 字符常量相当于一个整形值( ASCII 值),可以参加表达式运算；字符串常量代表一个地址值(该字符串在内存中存放位置)</li>
<li>占内存大小 字符常量只占 2 个字节；字符串常量占若干个字节(至少一个字符结束标志) (<strong>注意：</strong> <strong>char</strong> <strong>在</strong> <strong>Java</strong> <strong>中占两个字节</strong>)</li>
</ol>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>大小</th>
<th>取值区间</th>
<th>包装器类型</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>-</td>
<td>-</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td>16bits</td>
<td>Unicode 0-Unicode 2^16-1</td>
<td>Character</td>
</tr>
<tr>
<td>byte</td>
<td>8bits</td>
<td>-128~127</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>16bits</td>
<td>-2^15~2^15-1</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>32bits</td>
<td>-2^31~2^31-1</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>64bits</td>
<td>-2^63~2^63-1</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>32bits</td>
<td>1.4E-45 （2的-149次方）~3.4028235E38 （2的128次方-1）</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>64bits</td>
<td>4.9E-324 （2的-1074次方）~1.7976931348623157E308 （2的1024次方-1）</td>
<td>Double</td>
</tr>
</tbody></table>
<h1 id="重载-VS-重写"><a href="#重载-VS-重写" class="headerlink" title="重载 VS 重写"></a>重载 VS 重写</h1><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>在同一个类中，方法名相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。</p>
<h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常小于等于父类，访问修饰符大于等于父类。</p>
<h1 id="String-VS-StringBuffer-VS-StringBuilder"><a href="#String-VS-StringBuffer-VS-StringBuilder" class="headerlink" title="String VS StringBuffer VS StringBuilder"></a>String VS StringBuffer VS StringBuilder</h1><h2 id="可变性"><a href="#可变性" class="headerlink" title="可变性"></a>可变性</h2><p>String 类中使用 final 关键字字符数组保存字符串，private</p>
<p>final char value[]，所以 String 对象是不可变的。而 StringBuilder 与</p>
<p>StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串 char[]value 但是没有用 final 关键字修饰，所以这两种对象都是可变的。</p>
<h2 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h2><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。</p>
<p>StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以</p>
<p>是线程安全的。</p>
<p>StringBuilder 并没有对方法进行加同步锁，所以是非线程安全</p>
<p>的。</p>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。</p>
<p>StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p>
<h1 id="自动拆箱装箱"><a href="#自动拆箱装箱" class="headerlink" title="自动拆箱装箱"></a>自动拆箱装箱</h1><ul>
<li>装箱：将基本类型用它们对应的引用类型包装起来；</li>
<li>拆箱：将包装类型转换为基本数据类型。</li>
</ul>
<h1 id="抽象-VS-接口"><a href="#抽象-VS-接口" class="headerlink" title="抽象 VS 接口"></a>抽象 VS 接口</h1><ol>
<li><p>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），抽象类可以有非抽象的方法</p>
</li>
<li><p>接口中的实例变量默认是 final 类型的，而抽象类中则不一定</p>
</li>
<li><p>一个类可以实现多个接口，但最多只能实现一个抽象类</p>
</li>
<li><p>一个类实现接口的话要实现接口的所有方法，而抽象类不一定</p>
</li>
<li><p>接口不能用 new 实例化，但可以声明，但是必须引用一个实现该接口的对象 从设计层面来说，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。</p>
</li>
</ol>
<h1 id="成员变量-VS-局部变量"><a href="#成员变量-VS-局部变量" class="headerlink" title="成员变量 VS 局部变量"></a>成员变量 VS 局部变量</h1><ol>
<li>语法形式：看成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数；成员变量可以被public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰；</li>
<li>变量在内存中的存储方式：，成员变量是对象的一部分，而对象存在于堆内存，局部变量存在于栈内存。</li>
<li>变量在内存中的生存时间：，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。</li>
<li>成员变量如果没有被赋初值，则会自动以类型的默认值而赋值（一种情况例外被 final 修饰的成员变量也必须显示地赋值）；而局部变量则不会自动赋值。</li>
</ol>
<h1 id="创建对象的方法"><a href="#创建对象的方法" class="headerlink" title="创建对象的方法"></a>创建对象的方法</h1><h2 id="使用new关键字"><a href="#使用new关键字" class="headerlink" title="使用new关键字"></a>使用new关键字</h2><p>调用了构造函数</p>
<h2 id="使用Class类的newInstance方法"><a href="#使用Class类的newInstance方法" class="headerlink" title="使用Class类的newInstance方法"></a>使用Class类的newInstance方法</h2><p>调用了构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee emp2 = Employee.class.newInstance();</span><br></pre></td></tr></table></figure>

<h2 id="使用Constructor类的newInstance方法"><a href="#使用Constructor类的newInstance方法" class="headerlink" title="使用Constructor类的newInstance方法"></a>使用Constructor类的newInstance方法</h2><p>调用了构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;Employee&gt; constructor = Employee.class.getConstructor();</span><br><span class="line">Employee emp3 = constructor.newInstance();</span><br></pre></td></tr></table></figure>



<h2 id="使用clone方法"><a href="#使用clone方法" class="headerlink" title="使用clone方法"></a>使用clone方法</h2><p>没有调用构造函数。要使用clone方法，我们需要先实现Cloneable接口并实现其定义的clone方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee emp4 = (Employee) emp3.clone();</span><br></pre></td></tr></table></figure>



<h2 id="使用反序列化"><a href="#使用反序列化" class="headerlink" title="使用反序列化"></a>使用反序列化</h2><p>没有调用构造函数。反序列化一个对象，我们需要让我们的类实现Serializable接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;data.obj&quot;</span>));</span><br><span class="line">Employee emp5 = (Employee) in.readObject();</span><br></pre></td></tr></table></figure>

<h1 id="静态方法-VS-实例方法"><a href="#静态方法-VS-实例方法" class="headerlink" title="静态方法 VS 实例方法"></a>静态方法 VS 实例方法</h1><ol>
<li><p>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。</p>
</li>
<li><p>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制.</p>
</li>
</ol>
<h1 id="VS-equals"><a href="#VS-equals" class="headerlink" title="== VS equals"></a>== VS equals</h1><h2 id=""><a href="#" class="headerlink" title="=="></a>==</h2><p>它的作用是判断两个对象的<strong>地址是不是相等</strong>。即，判断两个对象是不是同一个对象。(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)</p>
<h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><p>它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p>
<ol>
<li>类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个</li>
</ol>
<p>对象时，等价于通过“==”比较这两个对象。</p>
<ol start="2">
<li><p>类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来</p>
<p>两个对象的内容相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</p>
</li>
</ol>
<h1 id="hashCode-VS-equals"><a href="#hashCode-VS-equals" class="headerlink" title="hashCode VS equals"></a>hashCode VS equals</h1><h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在 JDK 的 Object.java 中，这就意味着 Java 中的任何类都包含有 hashCode() 函数。</p>
<p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！</p>
<ol>
<li><p>如果两个对象相等，则 hashcode 一定也是相同的</p>
</li>
<li><p>两个对象相等,对两个对象分别调用 equals 方法都返回 true</p>
</li>
<li><p>两个对象有相同的 hashcode 值，它们也不一定是相等的</p>
</li>
<li><p><strong>因此，****equals</strong> <strong>方法被覆盖过，则</strong> <strong>hashCode</strong> <strong>方法也必须被覆盖</strong></p>
</li>
<li><p>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p>
</li>
</ol>
<h1 id="为什么Java只有值传递"><a href="#为什么Java只有值传递" class="headerlink" title="为什么Java只有值传递"></a>为什么Java只有值传递</h1><p>值传递（pass by value）是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p>
<p>引用传递（pass by reference）是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p>
<h1 id="线程-VS-程序-VS-进程"><a href="#线程-VS-程序-VS-进程" class="headerlink" title="线程 VS 程序 VS 进程"></a>线程 VS 程序 VS 进程</h1><ul>
<li><p><strong>线程</strong>与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p>
</li>
<li><p><strong>程序</strong>是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。</p>
</li>
<li><p><strong>进程</strong>是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。</p>
</li>
</ul>
<h1 id="线程的基本状态"><a href="#线程的基本状态" class="headerlink" title="线程的基本状态"></a>线程的基本状态</h1><ol>
<li>新建状态（New）：当线程对象对创建后，即进入了新建状态，如：Thread t = new MyThread();</li>
<li>就绪状态（Runnable）：当调用线程对象的start()方法（t.start();），线程即进入就绪状态。处于就绪状态的线程，只是说明此线程已经做好了准备，随时等待CPU调度执行，并不是说执行了t.start()此线程立即就会执行；</li>
<li>运行状态（Running）：当CPU开始调度处于就绪状态的线程时，此时线程才得以真正执行，即进入到运行状态。注：就   绪状态是进入到运行状态的唯一入口，也就是说，线程要想进入运行状态执行，首先必须处于就绪状态中；</li>
<li>阻塞状态（Blocked）：处于运行状态中的线程由于某种原因，暂时放弃对CPU的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才 有机会再次被CPU调用以进入到运行状态。根据阻塞产生的原因不同，阻塞状态又可以分为三种：</li>
</ol>
<ul>
<li><p>1.等待阻塞：运行状态中的线程执行wait()方法，使本线程进入到等待阻塞状态；</p>
</li>
<li><p>2.同步阻塞 – 线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态；</p>
</li>
<li><p>3.其他阻塞 – 通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。</p>
</li>
</ul>
<ol start="5">
<li>死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</li>
</ol>
<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 <strong>Throwable</strong>类<strong>。Throwable： 有两个重要的子类：</strong>Exception<strong>（异常）</strong> 和 <strong>Error</strong>（错误） ，二者都是 Java 异常处理的重要子类，各自都包含大量子类。</p>
]]></content>
  </entry>
  <entry>
    <title>十进制-十六进制转换问题</title>
    <url>/2019/01/08/Java/Basic/Java-%E8%BF%9B%E5%88%B6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>​    最近在做 <code>Netty </code>解析<code>TCP</code>协议的时候，遇到了<code>hexstring</code>和<code>string</code>的转换问题。</p>
<h1 id="HexString"><a href="#HexString" class="headerlink" title="HexString"></a>HexString</h1><p>​    Hex是由对应机器语言码和/或常量数据的十六进制编码数字组成。</p>
<h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><h2 id="十进制转十六进制"><a href="#十进制转十六进制" class="headerlink" title="十进制转十六进制"></a>十进制转十六进制</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hex = Integer.toHexString(<span class="number">48</span>); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure>

<h2 id="十六进制转十进制"><a href="#十六进制转十进制" class="headerlink" title="十六进制转十进制"></a>十六进制转十进制</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String num = Integer.valueOf(<span class="string">&quot;fafa&quot;</span>, <span class="number">16</span>); <span class="comment">//64250</span></span><br><span class="line">String num = Integer.parseInt(<span class="string">&quot;fafa&quot;</span>, <span class="number">16</span>); <span class="comment">//64250</span></span><br></pre></td></tr></table></figure>

<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>​    若十进制数为负数，转换将出现问题。</p>
<p>如<code>Integer.toHexString(-6)</code>将输出<code>fffffa</code>，此时若进行十六进制转十进制将报<code>NumberFormatException</code>，因此此处在转为<code>Hex</code>的时候需做如下操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Integer.toHexString(-6 &amp; 0xff);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Radix</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap</title>
    <url>/2021/05/25/Java/Collection/HashMap/</url>
    <content><![CDATA[<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>Hash又称<em>散列</em>、<em>哈希</em>。通过Hash算法将任意长度的输入，转换成固定长度的输出。这个映射规则就是对应的Hash算法，原始数据映射后的二进制值就是<em>哈希值</em>。</p>
<h2 id="Hash的特点"><a href="#Hash的特点" class="headerlink" title="Hash的特点"></a>Hash的特点</h2><ul>
<li>从Hash值不可以反向推导出原始数据</li>
<li>输入的数据的唯一性。不同的值转换Hash值不同，相同的值Hash相同</li>
<li>哈希算法的执行效率高效</li>
<li>Hash算法的冲突概率要小</li>
</ul>
<h2 id="Hash碰撞"><a href="#Hash碰撞" class="headerlink" title="Hash碰撞"></a>Hash碰撞</h2><p>如果两个输入值的Hash值一样，则称这两个串发生了Hash碰撞<em>Collision</em>，处理Hash碰撞的算法有<strong>链地址法</strong>和<strong>开放地址法</strong></p>
<h3 id="链地址法"><a href="#链地址法" class="headerlink" title="链地址法"></a>链地址法</h3><p>链表地址法是使用一个<em>链表数组</em>来存储数据，当Hash遇到冲突的时候，以此添加到链表的后面。</p>
<h3 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h3><p>开放地址法是指大小为M的数组保存N个键值对(M&gt;N)，通过数组中的空位解决碰撞冲突。这种策略的方法统称为<strong>开放地址</strong>。<strong>线性探测法</strong>就是比较常用的一种<strong>开放地址</strong>哈希表的实现。线性探测的核心思想就是当发生碰撞时，顺序查看表中的下一单元，直到找出一个空单元或查遍全表。<strong>只要散列表足够大，空的散列地址总能找到。</strong></p>
<p>除<strong>线性探测法</strong>外，还有<strong>二次探测</strong>和<strong>双重散列</strong>等经典探测方法，为了保证散列表的操作效率，我们需要尽可能的保证散列表中有一定比例的空闲槽位，我们用<strong>装载因子</strong> <em>load factor</em>来表示空位的多少。</p>
<h2 id="HashMap-1"><a href="#HashMap-1" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul>
<li>JDK1.7及之前：数组+链表</li>
<li>JDK1.8：数组+链表+红黑树</li>
</ul>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始容量16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"><span class="comment">// 加载因子0.75</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"><span class="comment">// 链表转红黑树阈值8</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"><span class="comment">// 红黑数转链表阈值6</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"><span class="comment">// 当桶的个数达到64进行树化</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储元素的数组</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"><span class="comment">// 保存entrySet的缓存</span></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"><span class="comment">// 元素的数量</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">// 每次扩容和更改map结构的计数器</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"><span class="comment">// 临界值 当实际大小超过临时临界值时，会进行扩容</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"><span class="comment">// 加载因子</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure>

<ul>
<li>容量：数组的长度，即<strong>桶</strong>的个数，默认的长度，最大的长度为2^30，当容量达到64时进行树化。</li>
<li>树化：当桶的容量达到64，且链表的长度达到8时进行树化，当链表的长度小于6时反树化。</li>
</ul>
<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Node是静态内部类，单链表节点，hash存储存储key和value计算得来的hash值。</p>
<h3 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">        TreeNode&lt;K,V&gt; left;</span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">        TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">        <span class="keyword">boolean</span> red;</span><br><span class="line">        TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>多关键字List去重</title>
    <url>/2018/12/12/Java/Collection/Java-List%E5%8E%BB%E9%87%8D/</url>
    <content><![CDATA[<h1 id="List去重（n个条件去重）"><a href="#List去重（n个条件去重）" class="headerlink" title="List去重（n个条件去重）"></a>List去重（n个条件去重）</h1><p>​    最近遇到一个情况，需要在一个List<Object>中去除包含多个字段相同的重复对象。寻找Lambda无果，只好使用一下方法。</p>
<h2 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h2><p>​    目前存在DepotLogs对象，其中的barCode和posId可能存在两个DepotLogs对象的两个属性值相同，因此需要去除重复对象只留一条。DepotLogs对象如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepotLogsPO</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String barCode;</span><br><span class="line">    <span class="keyword">private</span> Long posId;</span><br><span class="line">    <span class="keyword">private</span> String action;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>​    通过重写DepotLogs的equals方法解决问题</p>
<h3 id="重写equals方法"><a href="#重写equals方法" class="headerlink" title="重写equals方法"></a>重写equals方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> == obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    DepotLogsPO depotLogsPO = (DepotLogsPO) obj;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.getPosId().compareTo(depotLogsPO.getPosId()) == <span class="number">0</span></span><br><span class="line">       &amp;&amp; <span class="keyword">this</span>.getBarCode().equals(depotLogsPO.getBarCode()))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;DepotLogsPO&gt; <span class="title">getNoRepeatPostIdAndBarCodeDepotLogsList</span><span class="params">(List&lt;DepotLogsPO&gt; depotLogsPOS)</span> </span>&#123;</span><br><span class="line">    List&lt;DepotLogsPO&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(CollectionUtils.isNotEmpty(depotLogsPOS)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (DepotLogsPO po : depotLogsPOS) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!list.contains(po)) &#123;</span><br><span class="line">                list.add(po);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    至此，问题就解决了。设想过Lambda的方法实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;DepotLogsPO&gt; contents = page.getContent();</span><br><span class="line">List&lt;DepotLogsPO&gt; tmps = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">contents.forEach(content -&gt; &#123;</span><br><span class="line">    DepotLogsPO depotLogsPO = contents.stream().filter(</span><br><span class="line">        v -&gt; &#123; <span class="keyword">boolean</span> flag = v.getPosId() == content.getPosId() &amp;&amp; v.getBarCode().equals(content.getBarCode());</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;).distinct().collect(Collectors.toList()).get(<span class="number">0</span>);</span><br><span class="line">    tmps.add(depotLogsPO);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>​    但是其中content中也存在重复对象，感觉解决起来特别麻烦。若有大神知道怎么用Lambda解决，还望多多指点。</p>
<hr>
<h1 id="List多字段去重"><a href="#List多字段去重" class="headerlink" title="List多字段去重"></a>List多字段去重</h1><p>​    根据<code>devId</code>和<code>cmd</code>去重，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;SmartLightDispatcherPO&gt; distinctList = lists.stream().collect(Collectors.collectingAndThen(</span><br><span class="line">                Collectors.toCollection(() -&gt; <span class="keyword">new</span> TreeSet&lt;&gt;(Comparator.comparing(o -&gt; o.getDevId() + <span class="string">&quot;;&quot;</span> + o.getCmd()))), ArrayList::<span class="keyword">new</span></span><br><span class="line">        ));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Retrofit2调用远程接口</title>
    <url>/2019/03/08/Java/http/java-retrofit2/</url>
    <content><![CDATA[<h1 id="Retrofit2调用远程接口"><a href="#Retrofit2调用远程接口" class="headerlink" title="Retrofit2调用远程接口"></a>Retrofit2调用远程接口</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>调用远程接口其中一种实现便是以retrofit2的方式实现，以下笔记备注一下实现步骤。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="pom文件引入"><a href="#pom文件引入" class="headerlink" title="pom文件引入"></a>pom文件引入</h3><p>使用<code>retrofit2</code>需要在<code>pom.xml</code>引入相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logging-interceptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.retrofit2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>retrofit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.retrofit2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>converter-gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="工具类编写"><a href="#工具类编写" class="headerlink" title="工具类编写"></a>工具类编写</h3><p>这里我们需要一个<code>HttpProxy</code>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.viroyal.common.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> okhttp3.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> okhttp3.internal.platform.Platform;</span><br><span class="line"><span class="keyword">import</span> okhttp3.logging.HttpLoggingInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> retrofit2.Converter;</span><br><span class="line"><span class="keyword">import</span> retrofit2.Retrofit;</span><br><span class="line"><span class="keyword">import</span> retrofit2.converter.gson.GsonConverterFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> org.slf4j.Logger logger = LoggerFactory.getLogger(HttpProxy.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> HttpProxy INSTANCE = <span class="keyword">new</span> HttpProxy();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Class&lt;?&gt;, Object&gt; HTTP_PROXIES_MAP = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Class&lt;?&gt;, Object&gt; HTTPS_PROXIES_MAP = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> &lt;T&gt; <span class="function">Object <span class="title">getApiProxy</span><span class="params">(Class&lt;T&gt; clazz, String host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (HTTP_PROXIES_MAP.containsKey(clazz)) &#123;</span><br><span class="line">            <span class="keyword">return</span> HTTP_PROXIES_MAP.get(clazz);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HttpLoggingInterceptor logInterceptor = <span class="keyword">new</span> HttpLoggingInterceptor((String s) -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        logInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line">        OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient.Builder().addInterceptor(logInterceptor).build();</span><br><span class="line">        Retrofit retrofitUser = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(host)</span><br><span class="line">                .client(okHttpClient)</span><br><span class="line">                .addConverterFactory(<span class="keyword">new</span> EmptyBodyConverterFactory())</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        Object apiProxy = retrofitUser.create(clazz);</span><br><span class="line">        HTTP_PROXIES_MAP.put(clazz, apiProxy);</span><br><span class="line">        <span class="keyword">return</span> apiProxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sslSocketFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> &lt;T&gt; <span class="function">Object <span class="title">getApiProxy</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            Class&lt;T&gt; clazz,</span></span></span><br><span class="line"><span class="params"><span class="function">            String host,</span></span></span><br><span class="line"><span class="params"><span class="function">            SSLSocketFactory sslSocketFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (HTTPS_PROXIES_MAP.containsKey(clazz)) &#123;</span><br><span class="line">            <span class="keyword">return</span> HTTPS_PROXIES_MAP.get(clazz);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HttpLoggingInterceptor logInterceptor = <span class="keyword">new</span> HttpLoggingInterceptor((String s) -&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        logInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line">        OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">                .addInterceptor(logInterceptor)</span><br><span class="line">                .sslSocketFactory(sslSocketFactory, Platform.get().trustManager(sslSocketFactory))</span><br><span class="line">                .hostnameVerifier((String, SSLSession) -&gt; &#123;</span><br><span class="line">                    logger.debug(<span class="string">&quot;ssl hostname verifier with host: &#123;&#125;&quot;</span>, host);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;).build();</span><br><span class="line"></span><br><span class="line">        Retrofit retrofitUser = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(host)</span><br><span class="line">                .client(okHttpClient)</span><br><span class="line">                .addConverterFactory(<span class="keyword">new</span> EmptyBodyConverterFactory())</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        Object apiProxy = retrofitUser.create(clazz);</span><br><span class="line">        HTTPS_PROXIES_MAP.put(clazz, apiProxy);</span><br><span class="line">        <span class="keyword">return</span> apiProxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EmptyBodyConverterFactory</span> <span class="keyword">extends</span> <span class="title">Converter</span>.<span class="title">Factory</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Converter&lt;ResponseBody, ?&gt; responseBodyConverter(Type type, Annotation[] annotations, Retrofit retrofit) &#123;</span><br><span class="line">            <span class="keyword">return</span> (ResponseBody body) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (body.contentLength() == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">return</span> retrofit.nextResponseBodyConverter(<span class="keyword">this</span>, type, annotations).convert(body);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="接口声明"><a href="#接口声明" class="headerlink" title="接口声明"></a>接口声明</h2><p>把需要引用的接口<code>api</code>完成，其中除了<code>@POST</code>还包括<code>@GET</code>等注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.viroyal.user.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> retrofit2.Call;</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.Body;</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.Header;</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.POST;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApiCommand</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@POST(&quot;/unified/message/v1/msg/deliver&quot;)</span></span><br><span class="line">    <span class="function">Call&lt;Object&gt; <span class="title">command</span><span class="params">(<span class="meta">@Header(value = &quot;auth_key&quot;)</span> String appKey,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@Header(value = &quot;auth_secret&quot;)</span> String authSecret,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@Header(value = &quot;app_id&quot;)</span> String appId,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@Header(value = &quot;mdc_value&quot;)</span> String mdcValue,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@Body</span> Object obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="http实现"><a href="#http实现" class="headerlink" title="http实现"></a>http实现</h1><p>此处，由于<code>host</code>为http请求，所以不需要<code>SSLSocketFactory</code>(<code>https</code>跳过安全验证的工厂)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.viroyal.user.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.viroyal.common.http.HttpProxy;</span><br><span class="line"><span class="keyword">import</span> com.viroyal.common.pojo.ExtraResponse;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> retrofit2.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-08 14:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDeliverCommand</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;msg_host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String msgHost;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;auth_key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String authKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;auth_secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String authSecret;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;app_id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String appId;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mdc_value&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String mdcValue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">smokeSensorNotification</span><span class="params">(String phone, String position, String imei)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;type&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">&quot;action&quot;</span>, <span class="string">&quot;smoker_sensor&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;mobile&quot;</span>, phone);</span><br><span class="line">        map.put(<span class="string">&quot;param&quot;</span>, position + <span class="string">&quot;,&quot;</span> + imei);</span><br><span class="line">        logger.info(<span class="string">&quot;Smoke sensor: post cmd with body : &#123;&#125;&quot;</span>, <span class="keyword">new</span> Gson().toJson(map));</span><br><span class="line">        ApiCommand apiCommand = (ApiCommand) HttpProxy.INSTANCE.getApiProxy(ApiCommand.class, msgHost);</span><br><span class="line">        Response&lt;Object&gt; response = apiCommand.command(authKey, authSecret, appId, mdcValue, map).execute();</span><br><span class="line">        <span class="keyword">if</span> (response.errorBody() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String result = response.errorBody().string();</span><br><span class="line">            logger.error(<span class="string">&quot;Smoke sensor response: &#123;&#125;&quot;</span>, result);</span><br><span class="line">            <span class="keyword">return</span> com.viroyal.common.pojo.Response.SYSTEM_BUSY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExtraResponse(response.body());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="https实现"><a href="#https实现" class="headerlink" title="https实现"></a>https实现</h1><p>若<code>host</code>为<code>https</code>则需要注入<code>javax.net.ssl.SSLSocketFactory</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.viroyal.user.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.viroyal.common.http.HttpProxy;</span><br><span class="line"><span class="keyword">import</span> com.viroyal.common.pojo.ExtraResponse;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> retrofit2.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-08 14:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDeliverCommand</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;msg_host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String msgHost;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;auth_key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String authKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;auth_secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String authSecret;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;app_id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String appId;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mdc_value&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> String mdcValue;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SSLSocketFactory sslSocketFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">smokeSensorNotification</span><span class="params">(String phone, String position, String imei)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;type&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">&quot;action&quot;</span>, <span class="string">&quot;smoker_sensor&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;mobile&quot;</span>, phone);</span><br><span class="line">        map.put(<span class="string">&quot;param&quot;</span>, position + <span class="string">&quot;,&quot;</span> + imei);</span><br><span class="line">        logger.info(<span class="string">&quot;Smoke sensor: post cmd with body : &#123;&#125;&quot;</span>, <span class="keyword">new</span> Gson().toJson(map));</span><br><span class="line">        ApiCommand apiCommand = (ApiCommand) HttpProxy.INSTANCE.getApiProxy(ApiCommand.class, msgHost, sslSocketFactory);</span><br><span class="line">        Response&lt;Object&gt; response = apiCommand.command(authKey, authSecret, appId, mdcValue, map).execute();</span><br><span class="line">        <span class="keyword">if</span> (response.errorBody() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String result = response.errorBody().string();</span><br><span class="line">            logger.error(<span class="string">&quot;Smoke sensor response: &#123;&#125;&quot;</span>, result);</span><br><span class="line">            <span class="keyword">return</span> com.viroyal.common.pojo.Response.SYSTEM_BUSY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExtraResponse(response.body());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>文件拷贝</title>
    <url>/2019/01/21/Java/io/Java-%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileCopy</span><span class="params">(String source, String target)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (InputStream in = <span class="keyword">new</span> FileInputStream(source)) &#123;</span><br><span class="line">        <span class="keyword">try</span> (OutputStream out = <span class="keyword">new</span> FileOutputStream(target)) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="keyword">int</span> bytesToRead;</span><br><span class="line">            <span class="keyword">while</span>((bytesToRead = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, bytesToRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileCopyNIO</span><span class="params">(String source, String target)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (FileInputStream in = <span class="keyword">new</span> FileInputStream(source)) &#123;</span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream out = <span class="keyword">new</span> FileOutputStream(target)) &#123;</span><br><span class="line">            FileChannel inChannel = in.getChannel();</span><br><span class="line">            FileChannel outChannel = out.getChannel();</span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">4096</span>);</span><br><span class="line">            <span class="keyword">while</span>(inChannel.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">                buffer.flip();</span><br><span class="line">                outChannel.write(buffer);</span><br><span class="line">                buffer.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx socket短链接转发</title>
    <url>/2019/03/13/Java/io/nginx%20socket%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​    在实现物联网过程中，起初设备所有都是往一台服务器发起请求进行直连。随着设备的增多，一台服务器肯定吃不消。于是想着通过nginx做分发。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>​    nginx配置文件添加如下配置</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">    <span class="comment"># 添加socket转发的代理</span></span><br><span class="line">    <span class="attribute">upstream</span> socket_proxy &#123;</span><br><span class="line">        <span class="comment">#hash $remote_addr consistent;</span></span><br><span class="line">        <span class="comment"># 转发的目的地址和端口</span></span><br><span class="line">        </span><br><span class="line">		<span class="attribute">server</span> <span class="number">192.168.1.48:9998</span> weight=<span class="number">5</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">30s</span>;		</span><br><span class="line">		<span class="attribute">server</span> <span class="number">192.168.1.214:9998</span> weight=<span class="number">5</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提供转发的服务，即访问localhost:9001，会跳转至代理socket_proxy指定的转发地址</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span> <span class="number">9001</span>;</span><br><span class="line">       <span class="attribute">proxy_connect_timeout</span> <span class="number">1s</span>;</span><br><span class="line">       <span class="attribute">proxy_timeout</span> <span class="number">3s</span>;</span><br><span class="line">       <span class="attribute">proxy_pass</span> socket_proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>并发基础</title>
    <url>/2019/03/05/Java/%E5%B9%B6%E5%8F%91/Java-%E5%B9%B6%E5%8F%911-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Java内存模型-同步八种操作"><a href="#Java内存模型-同步八种操作" class="headerlink" title="Java内存模型-同步八种操作"></a>Java内存模型-同步八种操作</h1><ul>
<li>lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态</li>
<li>unlock（解锁）：作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li>
<li>read（读取）：作用于主内存的变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用</li>
<li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中</li>
<li>use（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎</li>
<li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量</li>
<li>store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作</li>
<li>write（写入）：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中</li>
</ul>
<h1 id="Java内存模型-同步规则"><a href="#Java内存模型-同步规则" class="headerlink" title="Java内存模型-同步规则"></a>Java内存模型-同步规则</h1><ul>
<li>如果要把一个变量从主内存中复制到工作内存，就需要按顺寻地执行read和load操作，如果把变量从工作内存中同步回主内存中，就要按顺序地执行store和write操作。但是Java内存模型只要求上述操作必须按顺序执行，而没有保住必须是连续执行</li>
<li>不允许read和load、store和write操作之一单独出现</li>
<li>不允许一个线程丢弃它的最近的assign的操作，即变量在工作内存中改变了之后必须同步到主内存中</li>
<li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中</li>
<li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施use和store操作之前，必须先执行过了assign和load操作</li>
<li>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。lock和unlock必须成对出现</li>
<li>如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行load或assign操作初始化变量的值</li>
<li>如果一个变量实现没有被lock操作锁定，则不允许对它执行unlock操作；也不允许去unlock一个被其他线程锁定的变量</li>
<li>对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）</li>
</ul>
<p><img src="D:\Users\tougChow\Desktop\PanDownload_v2.0.1\0976、Java并发编程与高并发解决方案(完整无密)\Java并发课程资料\课程资料\相关图例\9.jpg" alt="9"></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>MockMvc测试</title>
    <url>/2019/03/08/Java/%E6%B5%8B%E8%AF%95/java-MockMvc/</url>
    <content><![CDATA[<h1 id="SpringBoot-MockMvc-Junit4进行单元测试"><a href="#SpringBoot-MockMvc-Junit4进行单元测试" class="headerlink" title="SpringBoot MockMvc Junit4进行单元测试"></a>SpringBoot MockMvc Junit4进行单元测试</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用SpringBoot MockMvc测试是快速测试的一种手段，需要在<code>pom.xml</code>文件中加入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在测试类中加入如下注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br></pre></td></tr></table></figure>

<h2 id="controller测试"><a href="#controller测试" class="headerlink" title="controller测试"></a>controller测试</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.viroyal.user.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.minidev.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MvcResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.ResultActions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext wac;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mvc = MockMvcBuilders.webAppContextSetup(<span class="keyword">this</span>.wac).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;tough&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;phone&quot;</span>,<span class="string">&quot;17623677587&quot;</span>);</span><br><span class="line">        String jsonObject = JSONObject.toJSONString(map);</span><br><span class="line">        System.out.println(jsonObject);</span><br><span class="line">        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post(<span class="string">&quot;/v1/sys/user/add&quot;</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .content(jsonObject);</span><br><span class="line"></span><br><span class="line">        ResultActions result = mvc.perform(requestBuilder);</span><br><span class="line"></span><br><span class="line">        MvcResult mvcResult = result.andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andDo(MockMvcResultHandlers.print())</span><br><span class="line">                .andReturn();<span class="comment">// 返回执行请求的结果</span></span><br><span class="line">        System.out.println(mvcResult.getResponse().getContentAsString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.viroyal.user.controller;</span><br><span class="line"></span><br><span class="line">import net.minidev.json.JSONObject;</span><br><span class="line">import org.junit.After;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line">import org.springframework.test.web.servlet.MockMvc;</span><br><span class="line">import org.springframework.test.web.servlet.MvcResult;</span><br><span class="line">import org.springframework.test.web.servlet.ResultActions;</span><br><span class="line">import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;</span><br><span class="line">import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line">import org.springframework.test.web.servlet.result.MockMvcResultHandlers;</span><br><span class="line">import org.springframework.test.web.servlet.result.MockMvcResultMatchers;</span><br><span class="line">import org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line">import org.springframework.web.context.WebApplicationContext;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class SysUserControllerTest &#123;</span><br><span class="line"></span><br><span class="line">    private MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private WebApplicationContext wac;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void setUp() &#123;</span><br><span class="line">        this.mvc = MockMvcBuilders.webAppContextSetup(this.wac).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After</span><br><span class="line">    public void tearDown() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void login() throws Exception &#123;</span><br><span class="line">        Map map = new HashMap();</span><br><span class="line">        map.put(&quot;username&quot;,&quot;tough&quot;);</span><br><span class="line">        map.put(&quot;password&quot;,&quot;123456&quot;);</span><br><span class="line"></span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.post(&quot;/v1/sys/user/login&quot;)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">            .content(JSONObject.toJSONString(map)))</span><br><span class="line">            .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">            .andExpect(MockMvcResultMatchers.jsonPath(&quot;errorCode&quot;).value(1000));</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Service层测试"><a href="#Service层测试" class="headerlink" title="Service层测试"></a>Service层测试</h2><p>原理和以上很相同，只需将dao层注入即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.viroyal.smart.smokesensor.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.viroyal.smart.smokesensor.dao.SmokeSensorRptDao;</span><br><span class="line"><span class="keyword">import</span> com.viroyal.smart.smokesensor.domain.SmokeSensorRptPO;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmokeSensorDeviceServiceImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmokeSensorRptDao smokeSensorRptDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        String[] str = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;866971030530914&quot;</span>,<span class="string">&quot;866971030530708&quot;</span>&#125;;</span><br><span class="line">        SmokeSensorRptPO smokeSensorRptPO = smokeSensorRptDao.findFirstByImeiInOrderByCtTimeDesc(Arrays.asList(str));</span><br><span class="line">        System.out.println(smokeSensorRptPO.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>junit</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx部署vue</title>
    <url>/2019/02/21/front-end/vue/nginx%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="vue打包"><a href="#vue打包" class="headerlink" title="vue打包"></a>vue打包</h1><p>​    使用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>生成打包文件，生成文件包含一个static文件夹以及一个index.html文件，位于项目的/dist目录下。</p>
<h1 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h1><p>​    此处我将文件上传至 <code>/data/wwwroot/mobile_school_h5/campus_micro/dm200</code> 路径下。</p>
<h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><h2 id="nginx-conf配置"><a href="#nginx-conf配置" class="headerlink" title="nginx.conf配置"></a>nginx.conf配置</h2><p>​    在nginx.conf配置文件中添加</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">include</span> vhost/<span class="regexp">*.conf</span>;</span><br></pre></td></tr></table></figure>

<h2 id="api-conf文件编写"><a href="#api-conf文件编写" class="headerlink" title="api.conf文件编写"></a>api.conf文件编写</h2><p>​    在当前目录下创建 <code>vhost</code>文件夹，并在 <code>vhost</code>文件夹下创建 <code>api.conf</code> 配置文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">8081</span>;</span><br><span class="line">	<span class="attribute">server_name</span> <span class="number">139.196.109.5</span>;</span><br><span class="line">	<span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line">	<span class="attribute">root</span> /data/wwwroot/mobile_school_h5/campus_micro/dm200;</span><br><span class="line">	<span class="attribute">location</span> / &#123;</span><br><span class="line">		<span class="attribute">try_files</span> $uri $uri/ @router;</span><br><span class="line">		<span class="attribute">index</span> index.html;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">location</span> @router &#123;</span><br><span class="line">		<span class="attribute">rewrite</span><span class="regexp"> ^.*$</span> /index.html <span class="literal">last</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    此处可配置多个端口号，<code>server_name</code> 可以设置为IP，<code>root</code>为文件的存放路径，一般都在html下新建要给文件夹，存放当前目录。<code>location</code>是为了防止404找不到。</p>
<h2 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h2><p>重新加载<code>nginx</code>命令如下：</p>
<p><code>/etc/init.d/nginx reload</code></p>
<p>启动nginx命令：</p>
<p><code>/etc/init.d/nginx restart</code></p>
<p>查看nginx启动状态命令:</p>
<p><code>/etc/init.d/nginx status</code></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue入门</title>
    <url>/2019/01/31/front-end/vue/vue%E5%85%A5%E9%97%A8-1/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​    使用npm</p>
<h2 id="脚手架创建"><a href="#脚手架创建" class="headerlink" title="脚手架创建"></a>脚手架创建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue init webpack viroyal-demo</span><br></pre></td></tr></table></figure>

<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i vant -S</span><br><span class="line">npm i axios -S</span><br></pre></td></tr></table></figure>

<h1 id="store"><a href="#store" class="headerlink" title="store"></a>store</h1><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i vuex-persistedstate -S</span><br></pre></td></tr></table></figure>

<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">&#x27;vuex-persistedstate&#x27;</span></span><br><span class="line"><span class="attr">plugins</span>: [createPersistedState()]</span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="store-js"><a href="#store-js" class="headerlink" title="store.js"></a>store.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">&#x27;vuex-persistedstate&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">userClass</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">setUserClass</span>(<span class="params">state, data</span>)</span> &#123;</span><br><span class="line">      state.userClass = data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [createPersistedState()]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  store</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">_this.$store.commit(<span class="string">&#x27;setUserClass&#x27;</span>, <span class="built_in">JSON</span>.stringify(classMsgArr))</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">_this.$store.state.classMsgArr</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>cas-server中KeyStore配置</title>
    <url>/2018/11/30/tools/cas/cas-keystore/</url>
    <content><![CDATA[<h1 id="生成key服务端密钥文件"><a href="#生成key服务端密钥文件" class="headerlink" title="生成key服务端密钥文件"></a>生成key服务端密钥文件</h1><p><code>keytool -genkeypair -keyalg RSA -keysize 1024 -sigalg SHA1withRSA -validity 36500 -alias sav.cas.com -keystore d:/thekeystore.thekeystore -dname &quot;CN=sav.cas.com,L=NanJing,ST=JiangSu,C=CN&quot;</code></p>
<h1 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h1><p><code>keytool -exportcert -alias sav.cas.com -keystore d:/thekeystore.thekeystore -file d:/thekeystore.cer -rfc</code></p>
<h1 id="导入cacerts证书库文件"><a href="#导入cacerts证书库文件" class="headerlink" title="导入cacerts证书库文件"></a>导入cacerts证书库文件</h1><p><code> keytool -import -alias sav.cas.com -keystore &#39;D:\Program Files\Java\jdk1.8.0_172\jre\lib\security\cacerts&#39; -file D:/thekeystore.cer -trustcacerts</code></p>
<h1 id="查看生成的key"><a href="#查看生成的key" class="headerlink" title="查看生成的key"></a>查看生成的key</h1><p><code>keytool -list -v -keystore thekeystore.thekeystore</code></p>
<h1 id="生成客户端密钥库文件"><a href="#生成客户端密钥库文件" class="headerlink" title="生成客户端密钥库文件"></a>生成客户端密钥库文件</h1><p><code>keytool -import -trustcacerts -alias cas -storepass changeit -file thekeyst ore.cer -keystore thekeystore</code></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>cas</category>
      </categories>
      <tags>
        <tag>keytool</tag>
      </tags>
  </entry>
  <entry>
    <title>cas-v5.3.6JDBC认证</title>
    <url>/2018/11/30/tools/cas/cas-v5.3.6JDBC%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="comment">/*!32312 IF NOT EXISTS*/</span>`db_ids` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;</span><br><span class="line"></span><br><span class="line">USE `db_ids`;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `sys_user` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_user`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `group_id` <span class="type">int</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户组别&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `school_id` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学校id&#x27;</span>,</span><br><span class="line">  `department_id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;部门id&#x27;</span>,</span><br><span class="line">  `user_name` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;1:男；2:女&#x27;</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">  `qq` <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;QQ号&#x27;</span>,</span><br><span class="line">  `weChat` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;微信号&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `MD5Password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;MD5(16位小写)&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">  `qq_openId` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;qq标识码&#x27;</span>,</span><br><span class="line">  `wechat_openId` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;微信标识码&#x27;</span>,</span><br><span class="line">  `ticket` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `expired_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;ticket失效时间&#x27;</span>,</span><br><span class="line">  `user_expired_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;登录失效时间&#x27;</span>,</span><br><span class="line">  `state` <span class="type">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;1:有效；0无效&#x27;</span>,</span><br><span class="line">  `userState` <span class="type">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;人员状态&#x27;</span>,</span><br><span class="line">  `stu_id` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;家长账号绑定的学生id&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `firstname` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `user_id` (`user_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">11426</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `sys_user` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `sys_user`(`id`,`group_id`,`user_id`,`school_id`,`department_id`,`user_name`,`sex`,`phone`,`qq`,`weChat`,`password`,`MD5Password`,`email`,`address`,`qq_openId`,`wechat_openId`,`ticket`,`expired_time`,`user_expired_time`,`state`,`userState`,`stu_id`,`update_time`,`firstname`) <span class="keyword">values</span> (<span class="number">11425</span>,<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1002&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;7c4a8d09ca3762af61e59520943dc26494f8941b&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;2018-11-28 14:39:17&#x27;</span>,<span class="string">&#x27;2018-11-28 14:39:17&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="添加pom依赖"><a href="#添加pom依赖" class="headerlink" title="添加pom依赖"></a>添加pom依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apereo.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-server-support-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cas.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apereo.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-server-support-jdbc-drivers<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cas.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="去掉静态用户的配置"><a href="#去掉静态用户的配置" class="headerlink" title="去掉静态用户的配置"></a>去掉静态用户的配置</h1><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">cas.authn.accept.users</span>=<span class="string">casuser::Mellon</span></span><br></pre></td></tr></table></figure>

<h1 id="新增JDBC认证"><a href="#新增JDBC认证" class="headerlink" title="新增JDBC认证"></a>新增JDBC认证</h1><p>​    在<code>application.perperties</code>文件中新增如下属性</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加jdbc认证</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].sql</span>=<span class="string">SELECT * FROM sys_user WHERE user_name=?</span></span><br><span class="line"><span class="comment">#那一个字段作为密码字段</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].fieldPassword</span>=<span class="string">password</span></span><br><span class="line"><span class="comment">#配置数据库连接</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].url</span>=<span class="string">jdbc:mysql://localhost:3306/db_ids?useUnicode=true&amp;amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].dialect</span>=<span class="string">org.hibernate.dialect.MySQL5Dialect</span></span><br><span class="line"><span class="comment">#数据库用户名</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].user</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#数据库密码</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].password</span>=<span class="string"></span></span><br><span class="line"><span class="comment">#mysql驱动</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<h1 id="新增加密方式"><a href="#新增加密方式" class="headerlink" title="新增加密方式"></a>新增加密方式</h1><p>​    在<code>application.properties</code>文件新增SHA-1加密方式</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置加密策略</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].passwordEncoder.type</span>=<span class="string">DEFAULT</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].passwordEncoder.characterEncoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="meta">cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm</span>=<span class="string">SHA-1</span></span><br><span class="line"><span class="comment">#Query Database Authentication 数据库查询校验用户名结束</span></span><br></pre></td></tr></table></figure>

<p>​    到这里就可以进行测试了!</p>
]]></content>
      <categories>
        <category>工具</category>
        <category>cas</category>
      </categories>
  </entry>
  <entry>
    <title>cas-v5.3.6骨架搭建</title>
    <url>/2018/11/30/tools/cas/cas-v5.3.6%E9%AA%A8%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>​    由于公司使用JDK版本为1.8，而cas 6.x需要JDK 11，因此在cas 5.3.x的基础上搭建cas。</p>
<h1 id="脚手架下载"><a href="#脚手架下载" class="headerlink" title="脚手架下载"></a>脚手架下载</h1><p>​    在<a href="https://github.com/apereo/cas-overlay-template">cas-overlay-template</a>官网选择<code>Branches</code>为5.3的分支，下载到本地。由于通过Maven仓库去下载<code>cas-server-webapp-tomcat:war:5.3.6</code>速度很慢，所以我们选择通过迅雷到<a href="https://oss.sonatype.org/content/repositories/releases/org/apereo/cas/cas-server-webapp-tomcat/5.3.6/">oss.sonatype.org</a>下载源码后移入本地<code>maven</code>仓库。</p>
<p>​    <code>maven</code>自动加载完成后会生成overlays文件，将<code>org.apereo.cas.cas-server-webapp-tomcat-5.3.6/WEB-INF/classes</code>下的<code>application.properties</code>文件拷贝到<code>src/main/resources</code>中。</p>
<h1 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hereyour.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-overlay<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apereo.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-server-webapp$&#123;app.server&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cas.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>war<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springboot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>$&#123;mainClassName&#125;<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executable</span>&gt;</span>$&#123;isExecutable&#125;<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>WAR<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">warName</span>&gt;</span>cas<span class="tag">&lt;/<span class="name">warName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">recompressZippedFiles</span>&gt;</span>false<span class="tag">&lt;/<span class="name">recompressZippedFiles</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">compress</span>&gt;</span>false<span class="tag">&lt;/<span class="name">compress</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifestFile</span>&gt;</span>$&#123;manifestFileToUse&#125;<span class="tag">&lt;/<span class="name">manifestFile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overlays</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">overlay</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apereo.cas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cas-server-webapp$&#123;app.server&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">overlay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">overlays</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>cas<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cas.version</span>&gt;</span>5.3.6<span class="tag">&lt;/<span class="name">cas.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">springboot.version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">springboot.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- app.server could be -jetty, -undertow, -tomcat, or blank if you plan to provide appserver --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">app.server</span>&gt;</span>-tomcat<span class="tag">&lt;/<span class="name">app.server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mainClassName</span>&gt;</span>org.springframework.boot.loader.WarLauncher<span class="tag">&lt;/<span class="name">mainClassName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">isExecutable</span>&gt;</span>false<span class="tag">&lt;/<span class="name">isExecutable</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">manifestFileToUse</span>&gt;</span>$&#123;project.build.directory&#125;/war/work/org.apereo.cas/cas-server-webapp$&#123;app.server&#125;/META-INF/MANIFEST.MF<span class="tag">&lt;/<span class="name">manifestFileToUse</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    通过<code>maven</code>工具打包生成war包后，可在<code>tomcat</code>中或者<code>./build.cmd</code>启动即可。使用<code>application.properties</code>中定义好的用户名密码登录可进行测试</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">cas.authn.accept.users</span>=<span class="string">casuser::Mellon</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
        <category>cas</category>
      </categories>
  </entry>
  <entry>
    <title>mysql删除指定日期前数据</title>
    <url>/2018/11/29/tools/db/mysql-%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A%E6%97%A5%E6%9C%9F%E5%89%8D%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>​    由于数据上报产生数据量过大，因此需要定期删除无用数据。</p>
<h1 id="程序方式"><a href="#程序方式" class="headerlink" title="程序方式"></a>程序方式</h1><p>​    mysql语句如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM t_iot_cb_device_data_changed WHERE EVENT_TIME IS NULL OR DATE(EVENT_TIME) &lt;= DATE(DATE_SUB(NOW(),INTERVAL 15 DAY))</span><br></pre></td></tr></table></figure>

<p>​    其中<code>EVENT_TIME</code>为要进行判断的时间依据。</p>
<p>​    此处为删除15天以前的数据，若需要删除几个月以前的数据，（以三个月为例）则为 <code>INTERVAL 3 MONTH</code>。</p>
<h1 id="通过存储过程解决"><a href="#通过存储过程解决" class="headerlink" title="通过存储过程解决"></a>通过存储过程解决</h1><h2 id="1-创建存储过程"><a href="#1-创建存储过程" class="headerlink" title="1. 创建存储过程"></a>1. 创建存储过程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP PROCEDURE IF EXISTS pro_clean_data;</span><br><span class="line">CREATE PROCEDURE pro_clean_data()</span><br><span class="line">    BEGIN  </span><br><span class="line">      DELETE FROM t_iot_cb_device_data_changed WHERE EVENT_TIME IS NULL OR DATE(EVENT_TIME) &lt;= DATE(DATE_SUB(NOW(),INTERVAL 15 DAY));</span><br><span class="line">    END</span><br></pre></td></tr></table></figure>

<h2 id="2-创建事件"><a href="#2-创建事件" class="headerlink" title="2. 创建事件"></a>2. 创建事件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE EVENT IF NOT EXISTS event_time_cleaner</span><br><span class="line">ON SCHEDULE EVERY 1 DAY STARTS &#x27;2018-12-19  01:00:00&#x27; </span><br><span class="line">ON COMPLETION PRESERVE </span><br><span class="line">DO CALL pro_clean_data();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
        <category>db</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 入门</title>
    <url>/2019/01/10/tools/docker/docker%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="获取、创建"><a href="#获取、创建" class="headerlink" title="获取、创建"></a>获取、创建</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker pull</span><br><span class="line">docker build</span><br></pre></td></tr></table></figure>

<h2 id="运行docker容器"><a href="#运行docker容器" class="headerlink" title="运行docker容器"></a>运行docker容器</h2><h3 id="docker-run-OPTIONS-IMAGE-TAG-COMMAND-ARG"><a href="#docker-run-OPTIONS-IMAGE-TAG-COMMAND-ARG" class="headerlink" title="docker run [OPTIONS] IMAGE[:TAG/][COMMAND][ARG...]"></a><code>docker run [OPTIONS] IMAGE[:TAG/][COMMAND][ARG...]</code></h3><p>决定容器的运行方式，前台执行还是后台执行</p>
<p>docker run后面追加-d=true或者-d，那么容器将会执行在后台模式。</p>
<p><code>docker exec</code>来进入到该容器中，或者attach重新连接容器的会话</p>
<p>进行交互式操作（如shell），那我们必须使用-i -t参数同容器进行数据交互</p>
<p>docker run时没有执行–name，那么deamon会自动生成一个随机字符串UUID</p>
<p>Docker时有自动化的需求，你可以将containerID输出到指定的文件中（PIDfile）： –cidfile=””</p>
<p>Docker的容器是没有特权的，例如不能在容器中再启动一个容器。这是因为默认情况下容器是不能访问任何其它设备的。但是通过”privileged”，容器就拥有了访问任何其它设备的权限。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> ubuntu <span class="built_in">echo</span> hello docker</span></span><br></pre></td></tr></table></figure>

<p>其中，<code>ubuntu</code>为<code>image</code>名字。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 8080:80 -d nginx</span></span><br></pre></td></tr></table></figure>

<p>其中，<code>-p</code>端口映射，将nginx的<code>80</code>端口映射到本地的<code>8080</code>端口；<code>-d</code>允许程序直接返回，将<code>container</code>作为守护进程来运行。</p>
<h2 id="查看本地所有image"><a href="#查看本地所有image" class="headerlink" title="查看本地所有image"></a>查看本地所有<code>image</code></h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h2 id="查看container"><a href="#查看container" class="headerlink" title="查看container"></a>查看<code>container</code></h2><h3 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<h3 id="查看所有的container"><a href="#查看所有的container" class="headerlink" title="查看所有的container"></a>查看所有的container</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<h2 id="拷贝文件到docker的container"><a href="#拷贝文件到docker的container" class="headerlink" title="拷贝文件到docker的container"></a>拷贝文件到docker的<code>container</code></h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker cp file <span class="number">17</span>add7bbc58c:/usr/share/nginx/html</span><br></pre></td></tr></table></figure>

<p>其中，<code>file</code>要拷贝的文件的，<code>17add7bbc58c</code>为<code>container</code>的id，<code>//usr/share/nginx/html</code>为目标路径。<code>cp</code>为host和image之间拷贝文件命令。</p>
<h2 id="停止docker"><a href="#停止docker" class="headerlink" title="停止docker"></a>停止docker</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker stop <span class="number">17</span>add7bbc58c</span><br></pre></td></tr></table></figure>

<p>其中，<code>17add7bbc58c</code>为container的id。</p>
<p>停止docker后，再次启动该容器，将被初始化，因此需要对所做修改进行保存。</p>
<h3 id="保存docker更改"><a href="#保存docker更改" class="headerlink" title="保存docker更改"></a>保存docker更改</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker commit -m <span class="string">&quot;commit message&quot;</span> <span class="number">17</span>add7bbc58c</span><br></pre></td></tr></table></figure>

<p>其中<code>commit message</code>为提交信息，<code>17add7bbc58c</code>为容器id。</p>
<p>这样保存，没有image名字和tag。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker commit -m <span class="string">&quot;commit message&quot;</span> <span class="number">17</span>add7bbc58c nginx-fun</span><br></pre></td></tr></table></figure>

<p>其中，<code>nginx-fun</code>为该images名字。</p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除image"><a href="#删除image" class="headerlink" title="删除image"></a>删除image</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi 17add7bbc58c</span><br></pre></td></tr></table></figure>

<h3 id="删除container"><a href="#删除container" class="headerlink" title="删除container"></a>删除container</h3><figure class="highlight do"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">rm</span> 17add7bbc58c 17add7bbc58b</span><br></pre></td></tr></table></figure>

<p>以上命令为删除id为<code>17add7bbc58c</code>和<code>17add7bbc58c</code>的container。</p>
<h1 id="容器生命周期相关指令"><a href="#容器生命周期相关指令" class="headerlink" title="容器生命周期相关指令"></a>容器生命周期相关指令</h1><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><figure class="highlight do"><table><tr><td class="code"><pre><span class="line">docker create/start/stop/<span class="keyword">pause</span>/unpause</span><br></pre></td></tr></table></figure>

<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight do"><table><tr><td class="code"><pre><span class="line">docker create --name mysqlserv -<span class="keyword">e</span> MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 mysql</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 自定义容器镜像</title>
    <url>/2019/03/08/tools/docker/docker%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h1 id="将容器变成镜像"><a href="#将容器变成镜像" class="headerlink" title="将容器变成镜像"></a>将容器变成镜像</h1><h2 id="法一-docker-commit"><a href="#法一-docker-commit" class="headerlink" title="法一 docker commit"></a>法一 docker commit</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit &lt;container&gt; [repo:tag]</span><br></pre></td></tr></table></figure>

<p>当我们在制作自己的镜像的时候，会在container中安装一些工具，修改配置，如果不做commit保存起来，那么container停止后再启动，这些更改就消失了。</p>
<h3 id="验证例子"><a href="#验证例子" class="headerlink" title="验证例子"></a>验证例子</h3><ol>
<li><code>docker create --name myjava -it java /bin/bash</code></li>
<li><code>docker start myjava</code></li>
<li><code>docker ps</code></li>
<li><code>docker exec -it d5c89f21f0d3 /bin/bash</code></li>
<li>创建一个自己的文件夹</li>
<li><code>docker commit d5c89f21f0d3 myjava</code></li>
<li><code>docker images</code></li>
<li><code>docker run -it myjava ls</code></li>
</ol>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>最方便 最快速</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>不规范 无法自动化</li>
</ul>
<h2 id="法二-Buildfile"><a href="#法二-Buildfile" class="headerlink" title="法二 Buildfile"></a>法二 Buildfile</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM nimmis/ubuntu:14.04</span><br><span class="line">MAINTAINER nimmis&lt;kjell.havneskold@gmail.com&gt;</span><br><span class="line">ENV DEBIAN_FRONTEND noninteractive</span><br><span class="line">ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line">RUN apt-get install -y software-properties-common &amp;&amp; \</span><br><span class="line">add-apt-repository ppa:openjdk-r/ppa -y &amp;&amp; \</span><br><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-intstall-recommends openjdk-8-jre &amp;&amp; \</span><br><span class="line">rm -rf /var/lib/apt/lists/*</span><br></pre></td></tr></table></figure>

<h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t leader/java .</span><br></pre></td></tr></table></figure>

<p>其中<code>leader/java</code>为命名的名称，<code>.</code>为在当前文件夹寻找该文件</p>
<h3 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h3><p>BuildFile中执行的环境并非本系统环境，而是docker环境。</p>
<p>如在文件中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RUN ./hello.sh #hello.sh 为本系统当前文件夹下一个输出`hello world`的文件</span><br></pre></td></tr></table></figure>

<p>这样执行是不会成功的。</p>
<p>需要在文件中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD hello.shh /bin/hello.sh</span><br><span class="line">RUN /bin/hello.sh</span><br></pre></td></tr></table></figure>

<p>才可以执行。</p>
<h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>Build过程中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RUN curl http://baidu.com</span><br></pre></td></tr></table></figure>

<p>无法成功，此时需要在文件中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENV http_proxy=http:///xxx</span><br><span class="line">RUN curl http://baidu.com</span><br></pre></td></tr></table></figure>

<p>代理后，才可以成功。</p>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>制作ubuntu+java+tomcat+ssh server镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubunntu</span><br><span class="line">MAINTAINER tough&lt;toughchow@gmail.com&gt;</span><br><span class="line">#更新源，安装ssh server</span><br><span class="line">RUN echo &quot;deb http://archive.ubuntu.com/ubuntu precise main universe&quot;&gt;/etc/apt/sources.list</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y openssh-server</span><br><span class="line">RUN mkdir -p /var/run/sshd</span><br><span class="line">#设置root ssh远程登录密码为123456</span><br><span class="line">RUN echo &quot;root:123456&quot;|chpasswd</span><br><span class="line">#添加oracle java7源，一次性安装vim wget curl java7 tomcat7等必备软件</span><br><span class="line">RUN apt-get install python-software-properties</span><br><span class="line">RUN add-apt-repository ppa:webupd8team/java</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y vim wget curl oracle-java7-installer tomcat7</span><br><span class="line">#设置JAVA_HOME环境变量</span><br><span class="line">RUN update-alternatives --display java</span><br><span class="line">RUN echo &quot;JAVA_HOME=/usr/lib/jvm/java-7-oracle&quot;&gt;&gt;/etc/enviroment</span><br><span class="line">RUN echo &quot;JAVA_HOME=/usr/lib/jvm/java-7-oracle&quot;&gt;&gt;/etc/default/tomcat7</span><br><span class="line"></span><br><span class="line">#容器需要开放ssh22端口</span><br><span class="line">EXPOSE 22</span><br><span class="line"></span><br><span class="line">#容器需要开放Tomcat 8080端口</span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">#设置Tomcat7初始化运行，SSH终端放服务器作为后台运行</span><br><span class="line">ENTRYPOINT service tomcat7 start &amp;&amp; /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure>

<p>其中<code>-y</code>为自动安装，不需要一直输入yes</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>git提交步骤</title>
    <url>/2018/12/29/tools/git/buildTools-git%E6%8F%90%E4%BA%A4%E5%87%A0%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<h1 id="Part-1-提交未授权问题"><a href="#Part-1-提交未授权问题" class="headerlink" title="Part 1 提交未授权问题"></a>Part 1 提交未授权问题</h1><p><code>git add -A</code></p>
<p><code>git commit -a &quot;&quot;</code></p>
<p><code>git push origin HEAD:refs/for/master</code></p>
<p><code>export GIT_SSH_COMMAND=&#39;ssh -o KexAlgorithms=+diffie-hellman-group1-sha1&#39;</code></p>
<p><code>scp -oKexAlgorithms=+diffie-hellman-group1-sha1  -p -P 29418 zhoufang@192.168.1.4:hooks/commit-msg .git/hooks/</code></p>
<h1 id="Part-2-无CHANGE-ID问题"><a href="#Part-2-无CHANGE-ID问题" class="headerlink" title="Part 2 无CHANGE-ID问题"></a>Part 2 无CHANGE-ID问题</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">remote: Hint: To automatically insert Change-Id, install the hook:</span><br><span class="line">remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 zhoufaming@192.168.1.4:hooks/commit-msg $&#123;gitdir&#125;/hooks/</span><br></pre></td></tr></table></figure>

<p>按照指令执行 <code>gitdir=$(git rev-parse --git-dir); scp -p -P 29418 zhoufaming@192.168.1.4:hooks/commit-msg $&#123;gitdir&#125;/hooks/</code></p>
<p>然后重新commit，push即可。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>gradle配置源及地址</title>
    <url>/2018/11/17/tools/gradle/buildTools-gradle%E9%85%8D%E7%BD%AE%E6%BA%90%E5%8F%8A%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<h1 id="配置阿里云仓库"><a href="#配置阿里云仓库" class="headerlink" title="配置阿里云仓库"></a>配置阿里云仓库</h1><p>​    在gradle目录下的init.d目录下创建init.gradle文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">allprojects&#123;</span></span><br><span class="line">    <span class="string">repositories</span> &#123;</span><br><span class="line">        <span class="string">def</span> <span class="string">REPOSITORY_URL</span> <span class="string">=</span> <span class="string">&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;</span></span><br><span class="line">        <span class="string">all</span> &#123; <span class="string">ArtifactRepository</span> <span class="string">repo</span> <span class="string">-&gt;</span></span><br><span class="line">            <span class="string">if(repo</span> <span class="string">instanceof</span> <span class="string">MavenArtifactRepository)</span>&#123;</span><br><span class="line">                <span class="string">def</span> <span class="string">url</span> <span class="string">=</span> <span class="string">repo.url.toString()</span></span><br><span class="line">                <span class="string">if</span> <span class="string">(url.startsWith(&#x27;https://repo1.maven.org/maven2&#x27;)</span> <span class="string">||</span> <span class="string">url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;))</span> &#123;</span><br><span class="line">                    <span class="string">project.logger.lifecycle</span> <span class="string">&quot;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;</span></span><br><span class="line">                    <span class="string">remove</span> <span class="string">repo</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">maven</span> &#123;</span><br><span class="line">            <span class="string">url</span> <span class="string">REPOSITORY_URL</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>gradle项目过于庞大无法加载完成</title>
    <url>/2018/11/30/tools/idea/buildTools-idea%E4%BC%98%E5%8C%96(%E9%A1%B9%E7%9B%AE%E5%BA%9E%E5%A4%A7%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    最近在接触cas-server统一认证系统，从github得到源码后导入idea，加载gradle文件加载到一半就报VM内存爆满，重试了一晚发现不行。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>更改一下idea的配置文件idea.vmoptions就可以了。tips：机器内存需要6G以上，不然卡爆。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xms1024m</span><br><span class="line">-Xms1024m</span><br><span class="line">-Xmx6144m</span><br><span class="line">-XX:ReservedCodeCacheSize=512m</span><br><span class="line">-XX:+UseCompressedOops</span><br><span class="line">-Dfile.encoding=UTF-8</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB=50</span><br><span class="line">-ea</span><br><span class="line">-Dsun.io.useCanonCaches=false</span><br><span class="line">-Djava.net.preferIPv4Stack=true</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line">-Xverify:none</span><br><span class="line"></span><br><span class="line">-XX:ErrorFile=$USER_HOME/java_error_in_idea_%p.log</span><br><span class="line">-XX:HeapDumpPath=$USER_HOME/java_error_in_idea.hprof</span><br><span class="line">-Xbootclasspath/a:../lib/boot.jar</span><br><span class="line">-XX:MaxMetaspaceSize=2048m</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Next小记</title>
    <url>/2018/11/27/tools/interesting/hexo-%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Hexo简易安装"><a href="#Hexo简易安装" class="headerlink" title="Hexo简易安装"></a>Hexo简易安装</h1><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p><code>npm install -g hexo-cli</code></p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><code>npm install -g hexo-cli</code></p>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="代码复制功能"><a href="#代码复制功能" class="headerlink" title="代码复制功能"></a>代码复制功能</h2><h3 id="clipboardjs"><a href="#clipboardjs" class="headerlink" title="clipboardjs"></a>clipboardjs</h3><p>​    下载第三方插件<a href="https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.min.js">clipboard.min.js</a>，在next主题下的<code>source\js\src</code>目录下新建<code>clipboard-use.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123; </span><br><span class="line">  <span class="comment">/* code */</span></span><br><span class="line">  <span class="keyword">var</span> initCopyCode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> copyHtml = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    copyHtml += <span class="string">&#x27;&lt;button class=&quot;btn-copy&quot; data-clipboard-snippet=&quot;&quot;&gt;&#x27;</span>;</span><br><span class="line">    copyHtml += <span class="string">&#x27;  &lt;i class=&quot;fa fa-globe&quot;&gt;&lt;/i&gt;&lt;span&gt;copy&lt;/span&gt;&#x27;</span>;</span><br><span class="line">    copyHtml += <span class="string">&#x27;&lt;/button&gt;&#x27;</span>;</span><br><span class="line">    $(<span class="string">&quot;.highlight .code pre&quot;</span>).before(copyHtml);</span><br><span class="line">    <span class="keyword">new</span> ClipboardJS(<span class="string">&#x27;.btn-copy&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="function"><span class="keyword">function</span>(<span class="params">trigger</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> trigger.nextElementSibling;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  initCopyCode();</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<p>​    在next主题下的<code>source\css\_custom\custom.styl</code>添加如下代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//代码块复制按钮</span><br><span class="line"><span class="selector-class">.highlight</span>&#123;</span><br><span class="line">//方便copy代码按钮（btn-copy）的定位</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-copy</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">#fcfcfc</span>,<span class="number">#eee</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d5d5d5</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  -webkit-user-select: none;</span><br><span class="line">  -moz-user-select: none;</span><br><span class="line">  -ms-user-select: none;</span><br><span class="line">  user-select: none;</span><br><span class="line">  -webkit-appearance: none;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">  -o-<span class="attribute">transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">transition</span>: opacity .<span class="number">3s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-copy</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-copy</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>​    在next主题下的<code>layout\_layout.swig</code>文件中引用clipboardjs</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/src/clipboard.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/clipboard-use.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>​    这样，复制功能就ok惹。</p>
<h1 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h1><p>​    在source/css/_custom.styl中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@media screen and (min-width:1200px) &#123;</span><br><span class="line"></span><br><span class="line">    body &#123;</span><br><span class="line">    background-image:url(/images/bg.jpg);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:50% 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #footer a &#123;</span><br><span class="line">        color:#eee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx入门</title>
    <url>/2019/03/14/tools/nginx/nginx-1/</url>
    <content><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>​    nginx是一个开源且高性能 可靠的HTTP中间件 代理服务</p>
<h2 id="常见的HTTP服务"><a href="#常见的HTTP服务" class="headerlink" title="常见的HTTP服务"></a>常见的HTTP服务</h2><p>HTTPD - Apache基金会</p>
<p>IIS - 微软</p>
<p>GWS - Google</p>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p>​    多个描述符的I/O操作都能在一个线程内并发交替地顺序完成。这就叫I/O多路复用，这里的<code>复用</code>指的是复用同一个线程。</p>
<p>​    IO多路复用的实现方式select poll epoll</p>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><ul>
<li>内核断发送Read请求，在应用端采用select一直遍历列表。select采用线性遍历。</li>
</ul>
<p>缺点</p>
<ol>
<li>能够监视文件描述符的数量存在最大限制</li>
<li>线性扫描效率低下</li>
</ol>
<h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><ul>
<li><p>每当FD就绪，采用系统的回调函数之间将fd放入，效率更高。</p>
</li>
<li><p>最大连接无限制</p>
</li>
<li><p>nginx使用epoll模式</p>
</li>
</ul>
<h2 id="轻量级"><a href="#轻量级" class="headerlink" title="轻量级"></a>轻量级</h2><p>功能模块少</p>
<p>代码模块化</p>
<h2 id="cpu亲和-affinity"><a href="#cpu亲和-affinity" class="headerlink" title="cpu亲和(affinity)"></a>cpu亲和(affinity)</h2><h3 id="什么是CPU亲和"><a href="#什么是CPU亲和" class="headerlink" title="什么是CPU亲和"></a>什么是CPU亲和</h3><p>​    是一种把CPU核心和Nginx工作进程绑定方式，把每个worker进程固定在一个cpu上执行，减少切换cpu的cache miss，获得更好的性能。</p>
<h2 id="sendfile"><a href="#sendfile" class="headerlink" title="sendfile"></a>sendfile</h2><p>​    传统sendfile中文件将通过内核空间到用户空间传输，而nginx中sendfile文件只需从内核空间传输即可。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络基础</title>
    <url>/2019/06/15/tools/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-1/</url>
    <content><![CDATA[<h1 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>定义：计算机网络的各层 + 协议的集合<br>作用：定义该计算机网络的所能完成的功能</p>
</blockquote>
<h2 id="结构介绍"><a href="#结构介绍" class="headerlink" title="结构介绍"></a>结构介绍</h2><p>计算机网络体系结构分为: OSI体系、TCP/IP体系、五层体系</p>
<blockquote>
<p>OSI:概念清楚、理念完整，但复杂、不实用。<br>TCP/IP:包含一系列构成互联网基础的网络协议，是Internet的核心协议<br>五层体系:融合了OSI与TCP/IP的体系</p>
</blockquote>
<p><img src="en-resource://database/871:0" alt="b8506825f805d4636b46b5e934c8141b.png"></p>
<h3 id="TCP示意图"><a href="#TCP示意图" class="headerlink" title="TCP示意图"></a>TCP示意图</h3><p><img src="en-resource://database/873:0" alt="884c445d420b3f1e1c467edf05618691.png"></p>
<h3 id="OSI示意图"><a href="#OSI示意图" class="headerlink" title="OSI示意图"></a>OSI示意图</h3><p><img src="en-resource://database/875:0" alt="3c59a37a70c666f2fbb665efa2187558.png"></p>
<h1 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h1><p>Transmission Control Protocol 传输控制协议</p>
<blockquote>
<p>属于传输层通信协议<br>基于TCP的应用层协议有HTTP SMTP FTP Telnet POP3</p>
</blockquote>
<h1 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>User Datagram Protocal 用户数据报协议</p>
<blockquote>
<p>属于传输层通信协议<br>基于UDP的应用层协议有 TFTP（文件传输） SNMP（网络管理） DNS（域名转换）</p>
</blockquote>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><img src="en-resource://database/877:0" alt="331d9d5211160a518d1d18c9cc3ea671.png"></p>
<h2 id="报文段格式"><a href="#报文段格式" class="headerlink" title="报文段格式"></a>报文段格式</h2><ul>
<li>UDP的报文段由<code>数据字段</code>和<code>首部字段</code>组成<br><img src="en-resource://database/879:0" alt="551a68b3e3b32c50d3e4258e2125945a.png"><br><img src="en-resource://database/881:0" alt="978f589a195cc27b64817ee471208321.png"></li>
</ul>
<h2 id="TCP-UDP协议的区别"><a href="#TCP-UDP协议的区别" class="headerlink" title="TCP UDP协议的区别"></a>TCP UDP协议的区别</h2><p><img src="en-resource://database/883:0" alt="40a0ca457129e44ff3a57a3aa5d6e761.png"></p>
<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>HyperText Transfer Protocal 超文本传输协议</p>
<blockquote>
<p>属于应用层，规定了应用进程间通信的准则</p>
</blockquote>
<h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ul>
<li>传输效率高<ol>
<li>无连接 交换HTTP报文前，不需要建立HTTP连接</li>
<li>无状态 传输过程中，不保存任何历史和状态信息</li>
<li>传输格式简单 请求时，只需要传输请求方法和路径</li>
</ol>
</li>
<li>传输可靠性高<br>  采用TCP作为运输层协议</li>
<li>其他<ol>
<li>兼容性好 支持BS CS结构</li>
<li>灵活性高 HTTP允许传输任何类型的数据对象</li>
</ol>
</li>
</ul>
<h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>套接字，是应用层与TCP/IP协议族通信中的软件抽象层，表现为一个封装了TCP/IP协议族的编程接口</p>
<blockquote>
<p>Socket 不是一种协议，而是一个编程调用接口，属于传输层<br>通过Socket，可以通过TCP/IP协议进行开发</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>netty入门</title>
    <url>/2019/03/16/Java/io/netty/netty-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​    在使用Netty开发TimeServer之前，先回顾一下使用NIO进行服务端开发的步骤。</p>
<ol>
<li>创建<code>ServerSocketChannel</code>,配置它为非阻塞模式；</li>
<li>绑定监听，配置TCP参数，例如backlog大小；</li>
<li>创建一个独立的I/O线程，用于轮询多路复用器Selector；</li>
<li>创建Selector，将之前创建的ServerSocketChannel注册到Selector，监听SelectionKey.ACCEPT;</li>
<li>启动I/O线程，在循环体重执行Selector.select()方法，轮询就绪的Channel；</li>
<li>当轮询到了处于就绪状态的Channel时，对其进行判断，如果是OP_ACCEPT状态，说明是新的客户端接入，则调用ServerSocketChannel.accept()方法接受新的客户端；</li>
<li>设置新接入的客户端链路SocketChannel为非阻塞模式，配置其他的一些TCP参数；</li>
<li>将SocketChannel注册到Selector，监听OP_READ操作位；</li>
<li>如果轮询的Channel为OP_READ,则说明SocketChannel中有新的就绪的数据包需要读取，则构建ByteBuffer对象，读取数据包；</li>
<li>如果轮询的Channel为OP_WRITE，说明还有数据没有发送完成，需要继续发送。</li>
</ol>
<h1 id="Netty时间服务器服务端"><a href="#Netty时间服务器服务端" class="headerlink" title="Netty时间服务器服务端"></a>Netty时间服务器服务端</h1><h2 id="TimeServer"><a href="#TimeServer" class="headerlink" title="TimeServer"></a>TimeServer</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li><p>创建线程组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br></pre></td></tr></table></figure>

<p>​    创建两个NioEventLoopGroup实例。<code>NioEventLoopGroup</code>是个线程组，它包含了一组NIO线程，专门用于网络时间的处理，实际上他们就是<code>Reactor</code>线程组。</p>
<p>​    这里创建两个的原因是一个用于服务端接收客户端的连接，另一个用于进行SocketChannel的网络读写。</p>
</li>
<li><p>ServerBootstraop对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br></pre></td></tr></table></figure>

<p>​    ServerBootstrap对象，是Netty用于启动NIO服务端的辅助启动类，目的是降低服务端的开发复杂度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b.group(bossGroup, workerGroup)</span><br><span class="line">    .channel(NioServerSocketChannel.class)</span><br><span class="line">	.option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</span><br><span class="line">    .childHandler(<span class="keyword">new</span> ChildChannelHandler());</span><br></pre></td></tr></table></figure>

<p>​    这里讲NIO线程组当作入参传递到ServerBootstrap中；</p>
<p>​    接着设置创建的Channel为NioServerSocketChannel，它的功能对应于JDK NIO类库中的ServerSocketChannel类;</p>
<p>​    然后配置NioServerScoketChannel中的TCP参数；</p>
<p>​    最后绑定I/O事件的处理类ChildChannelHandler，它的作用类似于Reactor模式中的Handler类，主要用于处理网络I/O事件，如记录日志、对消息进行编解码等。</p>
</li>
<li><p>调用bind方法</p>
<p>​    服务端启动辅助类配置完成后，调用它的bind方法绑定监听端口， 随后，调用它的同步阻塞方法sync等待绑定操作完成。完成之后，Netty会返回一个ChannelFuture。它的功能类似于JDK的java.util.concurrent.Future，主要用于异步操作的通知回调。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-14 11:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">/*  配置服务端的NIO线程组</span></span><br><span class="line"><span class="comment">            NioEventLoopGroup是个线程组，它包含了一组NIO线程，专门用于网络时间的处理，实际上就是Reactor线程组</span></span><br><span class="line"><span class="comment">            这里创建两个是一个用于服务端接收客户端的连接，一个用于SocketChannel的网络读写</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// ServerBootstrap是Netty用于启动NIO服务端的辅助启动类，目的是降低服务端的开发复杂度</span></span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            <span class="comment">// 将两个NIO线程组当作入参传递到ServerBootstrap中</span></span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)<span class="comment">// 设置创建的Channel为NioServerChannel（功能对应JDK NIO的ServerSocketChannel）</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>) <span class="comment">// 配置NioServerSocketChannel的TCP参数</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChildChannelHandler()); <span class="comment">// 绑定IO时间的处理类ChildChannelHandler 用于处理网络I/O事件</span></span><br><span class="line">            <span class="comment">// 绑定端口 同步等待成功</span></span><br><span class="line">            ChannelFuture f = b.bind(port).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待服务端监听端口关闭</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 退出 释放线程池资源</span></span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel arg0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            arg0.pipeline().addLast(<span class="keyword">new</span> WithOutConsiderTCPStickyTimeServerHandler());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8081</span>;</span><br><span class="line">        <span class="keyword">new</span> TimeServer().bind(port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="TimerServerHandler"><a href="#TimerServerHandler" class="headerlink" title="TimerServerHandler"></a>TimerServerHandler</h2><p>​    TimeServerHandler继承自ChannelHandlerAdapter，它用于对网络事件进行读写操作。</p>
<p>​    ChannelHandlerContext的write方法可异步发送应答消息给客户端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-14 13:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg; <span class="comment">// 将msg转换成Netty的ByteBuf对象</span></span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">        buf.readBytes(req);</span><br><span class="line">        String body = <span class="keyword">new</span> String(req, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Time server receive order : &quot;</span> + body);</span><br><span class="line">        String currentTime = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.equalsIgnoreCase(body) ? <span class="keyword">new</span> Date(</span><br><span class="line">                System.currentTimeMillis()).toString() : <span class="string">&quot;BAD ORDER&quot;</span>;</span><br><span class="line">        ByteBuf resp = Unpooled.copiedBuffer(currentTime.getBytes());</span><br><span class="line">        ctx.write(resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.flush(); <span class="comment">//将消息发送队列中的消息写入到SocketChannel中发送给对方</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Netty时间服务器客户端"><a href="#Netty时间服务器客户端" class="headerlink" title="Netty时间服务器客户端"></a>Netty时间服务器客户端</h1><h2 id="TimeClient"><a href="#TimeClient" class="headerlink" title="TimeClient"></a>TimeClient</h2><p>​    与服务端不同的是，它的Channel为<code>NioSocketChannel</code>，而服务端为<code>NioServerSocketChannel</code>,然后为其添加Handler。此处为了简单直接创建匿名内部类，实现initChannel方法，其作用是当创建NioSocketChannel成功后，在进行初始化之时，将它的ChannelHandler设置到ChannelPipeline中，用于处理网络I/O事件。</p>
<p>​    客户端启动辅助类设置完成之后，调用connect方法发起异步连接，然后调用同步方法等待连接成功。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-14 14:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> port, String host)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//配置客户端NIO线程组</span></span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            b.group(group).channel(NioSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> WithOutConsiderTCPStickyTimeClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发起异步连接操作</span></span><br><span class="line">            ChannelFuture f = b.connect(host, port).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待客户端链路关闭</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8081</span>;</span><br><span class="line">        <span class="keyword">new</span> TimeClient().connect(port, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="TimeClientHandler"><a href="#TimeClientHandler" class="headerlink" title="TimeClientHandler"></a>TimeClientHandler</h2><p>​    这里主要方法有channelActive、channelRead和exceptionCaught。</p>
<p>​    当客户端和服务端TCP链路建立成功之后，Netty的NIO线程会调用channelActive方法，发送查询时间的指令给服务端，调用ChannelHandlerCnotect的writeAndFlush方法将请求消息发送给服务端。</p>
<p>​    当服务端返回应答消息时，channelRead方法被调用，从Netty的ByteBuf中读取并打印消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-14 14:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger =Logger.getLogger(TimeClientHandler.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ByteBuf firstMessage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeClientHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.getBytes();</span><br><span class="line">        firstMessage = Unpooled.buffer(req.length);</span><br><span class="line">        firstMessage.writeBytes(req);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.warning(<span class="string">&quot;Unexpected exception : &quot;</span> + cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.writeAndFlush(firstMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">        buf.readBytes(req);</span><br><span class="line">        String body = <span class="keyword">new</span> String(req, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Now is : &quot;</span> + body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>http</category>
      </categories>
      <tags>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP分隔符和定长解码器</title>
    <url>/2019/03/19/Java/io/netty/netty-%E5%88%86%E9%9A%94%E7%AC%A6%E5%92%8C%E5%AE%9A%E9%95%BF%E8%A7%A3%E7%A0%81%E5%99%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​    TCP上层的协议通过四种方式对消息进行区分</p>
<ol>
<li>消息长度固定，累计读取到长度总和为定长LEN的报文后，就认为读取到了一个完整的消息；将计数器置位，重新开始读取下一个数据报；</li>
<li>将回车换行符作为消息结束符，如FTP协议，这种方式在文本协议中应用比较广泛；</li>
<li>将特殊的分隔符作为消息的结束标志，回车换行符就是一种特殊的结束分隔符；</li>
<li>通过在消息头中定义长度字段来标识消息的总长度。</li>
</ol>
<h1 id="DelimiterBasedFrameDecoder"><a href="#DelimiterBasedFrameDecoder" class="headerlink" title="DelimiterBasedFrameDecoder"></a>DelimiterBasedFrameDecoder</h1><p>​    <code>DelimiterBasedFrameDecoder</code>可以自动完成以分隔符作为码流结束标识的消息的解码。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="DelimiterBasedFrameDecoderEchoServer"><a href="#DelimiterBasedFrameDecoderEchoServer" class="headerlink" title="DelimiterBasedFrameDecoderEchoServer"></a><code>DelimiterBasedFrameDecoderEchoServer</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty.echoserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.DelimiterBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-19 19:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelimiterBasedFrameDecoderEchoServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">100</span>)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ByteBuf delimiter = Unpooled.copiedBuffer(<span class="string">&quot;$_&quot;</span>.getBytes());</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">1024</span>, delimiter));</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> DelimiterBasedFrameDecoderEchoServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            ChannelFuture f = b.bind(port).sync(); <span class="comment">//绑定端口 同步等待成功</span></span><br><span class="line"></span><br><span class="line">            f.channel().closeFuture().sync(); <span class="comment">// 等待服务端监听端口关闭</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8081</span>;</span><br><span class="line">        <span class="keyword">new</span> DelimiterBasedFrameDecoderEchoServer().bind(port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此处使用<code>$_</code>作为分隔符，并创建<code>DelimiterBasedFrameDecoder</code>对象，将其加入到<code>ChannelPipline</code>，<code>DelimiterBasedFrameDecoder</code>有多个构造方法，这里我们传递两个参数：第一个1024表示单条消息的最大长度，当达到该长度仍未找到分隔符，则报<code>TooLongFrameException</code>。第二个对象就是分隔符缓冲对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ByteBuf delimiter = Unpooled.copiedBuffer(<span class="string">&quot;$_&quot;</span>.getBytes())；</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">1024</span>, delimiter));</span><br></pre></td></tr></table></figure>

<h3 id="DelimiterBasedFrameDecoderEchoServerHandler"><a href="#DelimiterBasedFrameDecoderEchoServerHandler" class="headerlink" title="DelimiterBasedFrameDecoderEchoServerHandler"></a><code>DelimiterBasedFrameDecoderEchoServerHandler</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty.echoserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-19 19:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelimiterBasedFrameDecoderEchoServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String body = (String) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is &quot;</span> + ++counter + <span class="string">&quot; times receive client : [&quot;</span> + body + <span class="string">&quot; ]&quot;</span>);</span><br><span class="line">        body += <span class="string">&quot;$_&quot;</span>;</span><br><span class="line">        ByteBuf echo = Unpooled.copiedBuffer(body.getBytes());</span><br><span class="line">        ctx.writeAndFlush(echo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    由于我们设置<code>DelimiterBasedFrameDecoder</code>过滤掉了<code>$_</code>，所以在回复客户端的时候，需要加上<code>$_</code>，最后创建<code>ByteBuf</code>，将原始消息重新返回给客户端。</p>
<h3 id="DelimiterBasedFrameDecoderEchoClient"><a href="#DelimiterBasedFrameDecoderEchoClient" class="headerlink" title="DelimiterBasedFrameDecoderEchoClient"></a><code>DelimiterBasedFrameDecoderEchoClient</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty.echoserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.DelimiterBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-19 19:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelimiterBasedFrameDecoderEchoClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String host, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            b.group(group)</span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ByteBuf delimiter = Unpooled.copiedBuffer(<span class="string">&quot;$_&quot;</span>.getBytes());</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">1024</span>, delimiter));</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> DelimiterBasedFrameDecoderEchoClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            ChannelFuture f = b.connect(host,port).sync(); <span class="comment">//绑定端口 同步等待成功</span></span><br><span class="line"></span><br><span class="line">            f.channel().closeFuture().sync(); <span class="comment">// 等待服务端监听端口关闭</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8081</span>;</span><br><span class="line">        <span class="keyword">new</span> DelimiterBasedFrameDecoderEchoClient().connect(<span class="string">&quot;127.0.0.1&quot;</span>, port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="DelimiterBasedFrameDecoderEchoClientHandler"><a href="#DelimiterBasedFrameDecoderEchoClientHandler" class="headerlink" title="DelimiterBasedFrameDecoderEchoClientHandler"></a><code>DelimiterBasedFrameDecoderEchoClientHandler</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty.echoserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-19 20:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelimiterBasedFrameDecoderEchoClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ECHO_REQ = <span class="string">&quot;Hello ToughChow.$_&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++) &#123;</span><br><span class="line">            ctx.writeAndFlush(Unpooled.copiedBuffer(ECHO_REQ.getBytes()));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is &quot;</span> + ++counter + <span class="string">&quot; times receive server : [&quot;</span> + msg + <span class="string">&quot; ]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="FixedLengthFrameDecoder"><a href="#FixedLengthFrameDecoder" class="headerlink" title="FixedLengthFrameDecoder"></a>FixedLengthFrameDecoder</h1><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><h3 id="FixedLengthFrameDecoderEchoServer"><a href="#FixedLengthFrameDecoderEchoServer" class="headerlink" title="FixedLengthFrameDecoderEchoServer"></a><code>FixedLengthFrameDecoderEchoServer</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty.echoserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.DelimiterBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.FixedLengthFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-19 19:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedLengthFrameDecoderEchoServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">100</span>)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> FixedLengthFrameDecoder(<span class="number">20</span>));</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> FixedLengthFrameDecoderEchoServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            ChannelFuture f = b.bind(port).sync(); <span class="comment">//绑定端口 同步等待成功</span></span><br><span class="line"></span><br><span class="line">            f.channel().closeFuture().sync(); <span class="comment">// 等待服务端监听端口关闭</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8081</span>;</span><br><span class="line">        <span class="keyword">new</span> FixedLengthFrameDecoderEchoServer().bind(port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="FixedLengthFrameDecoderEchoServerHandler"><a href="#FixedLengthFrameDecoderEchoServerHandler" class="headerlink" title="FixedLengthFrameDecoderEchoServerHandler"></a><code>FixedLengthFrameDecoderEchoServerHandler</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty.echoserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-19 19:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedLengthFrameDecoderEchoServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Receive client : [&quot;</span> + msg + <span class="string">&quot; ]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​    <code>DelimiterBasedFrameDecoder</code>用于对使用分隔符结尾的消息进行自动解码，<code>FixedLengthDecoder</code>用于对固定长度的消息进行自动解码。</p>
<p>​    在一般情况下，只需将<code>DelimiterBasedFrameDecoder</code>或<code>FixedLengthDecoder</code>添加到对应<code>ChannelPipeline</code>的起始位即可。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>http</category>
      </categories>
      <tags>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP粘包和拆包</title>
    <url>/2019/03/16/Java/io/netty/netty-%E7%B2%98%E5%8C%85%E5%92%8C%E6%8B%86%E5%8C%85/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​    TCP是个<code>流</code>协议，在TCP底层并不了解上层业务数据的具体含义，它会根据TCP缓存区的实际情况进行包的划分。所以在业务上，一个完整的包可能会被TCP拆分成多个包进行发送，也有可能把多个小的包封装成一个大的数据包发送。这就是TCP的粘包<code>Sticky</code>和拆包<code>unpacking in </code>。</p>
<h2 id="TCP粘包-拆包发生的原因"><a href="#TCP粘包-拆包发生的原因" class="headerlink" title="TCP粘包 拆包发生的原因"></a>TCP粘包 拆包发生的原因</h2><ol>
<li>应用程序write写入的字节大小大于套接口发送缓冲区大小</li>
<li>进行MSS大小的TCP分段</li>
<li>以太网帧的payload大于MTU进行IP分片</li>
</ol>
<h2 id="异常案例"><a href="#异常案例" class="headerlink" title="异常案例"></a>异常案例</h2><h3 id="我们将TimerServerHandler进行改装一下"><a href="#我们将TimerServerHandler进行改装一下" class="headerlink" title="我们将TimerServerHandler进行改装一下"></a>我们将TimerServerHandler进行改装一下</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-14 13:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WithOutConsiderTCPStickyTimeServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> counter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg; <span class="comment">// 将msg转换成Netty的ByteBuf对象</span></span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">        buf.readBytes(req);</span><br><span class="line">        String body = <span class="keyword">new</span> String(req, <span class="string">&quot;UTF-8&quot;</span>).substring(<span class="number">0</span>, req.length</span><br><span class="line">            - System.getProperty(<span class="string">&quot;line.separator&quot;</span>).length());</span><br><span class="line">        System.out.println(<span class="string">&quot;Time server receive order : &quot;</span> + body</span><br><span class="line">            + <span class="string">&quot;; the counter is : &quot;</span> + ++counter);</span><br><span class="line">        String currentTime = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.equalsIgnoreCase(body) ? <span class="keyword">new</span> Date(</span><br><span class="line">                System.currentTimeMillis()).toString() : <span class="string">&quot;BAD ORDER&quot;</span>;</span><br><span class="line">        currentTime = currentTime + System.getProperty(<span class="string">&quot;line.separator&quot;</span>);</span><br><span class="line">        ByteBuf resp = Unpooled.copiedBuffer(currentTime.getBytes());</span><br><span class="line">        ctx.write(resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.flush(); <span class="comment">//将消息发送队列中的消息写入到SocketChannel中发送给对方</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    按照设计，服务端收到的消息总数应该和客户端发送的消息总数相同，而且请求消息删除回车换行符后应该为“QUERY TIME ORDER”</p>
<h3 id="接下来对客户端Handler改造一下"><a href="#接下来对客户端Handler改造一下" class="headerlink" title="接下来对客户端Handler改造一下"></a>接下来对客户端Handler改造一下</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-14 14:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WithOutConsiderTCPStickyTimeClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger</span><br><span class="line">            .getLogger(WithOutConsiderTCPStickyTimeClientHandler.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> counter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] req;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WithOutConsiderTCPStickyTimeClientHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        req = (<span class="string">&quot;QUERY TIME ORDER&quot;</span> + System.getProperty(<span class="string">&quot;line.separator&quot;</span>))</span><br><span class="line">                .getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.warning(<span class="string">&quot;Unexpected exception : &quot;</span> + cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf message = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            message = Unpooled.buffer(req.length);</span><br><span class="line">            message.writeBytes(req);</span><br><span class="line">            ctx.writeAndFlush(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">        buf.readBytes(req);</span><br><span class="line">        String body = <span class="keyword">new</span> String(req, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Now is : &quot;</span> + body + <span class="string">&quot; ; the counter is : &quot;</span> + ++counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    这里将循环发送100条消息，每发送一条就刷新一次，保证每条都会被写入Channel中，并每次收到服务端的应答消息之后，就打印一次计数器。</p>
<h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><p>​    客户端和服务端的counter并非想象中的100，此处发生了粘包。</p>
<h1 id="利用LineBasedFrameDecoder解决TCP粘包问题"><a href="#利用LineBasedFrameDecoder解决TCP粘包问题" class="headerlink" title="利用LineBasedFrameDecoder解决TCP粘包问题"></a>利用LineBasedFrameDecoder解决TCP粘包问题</h1><h2 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h2><h3 id="TimeServer"><a href="#TimeServer" class="headerlink" title="TimeServer"></a>TimeServer</h3><p>​    在原来的TimeServerHandler之前新增两个解码器<code>LineBasedFrameDecoder</code>和<code>StringDecoder</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arg0.pipeline().addLast(<span class="keyword">new</span> LineBasedFrameDecoder(<span class="number">1024</span>));</span><br><span class="line">arg0.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br></pre></td></tr></table></figure>

<p>​    源代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LineBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-14 11:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineBasedFrameDecoderTimeServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">/*  配置服务端的NIO线程组</span></span><br><span class="line"><span class="comment">            NioEventLoopGroup是个线程组，它包含了一组NIO线程，专门用于网络时间的处理，实际上就是Reactor线程组</span></span><br><span class="line"><span class="comment">            这里创建两个是一个用于服务端接收客户端的连接，一个用于SocketChannel的网络读写</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// ServerBootstrap是Netty用于启动NIO服务端的辅助启动类，目的是降低服务端的开发复杂度</span></span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            <span class="comment">// 将两个NIO线程组当作入参传递到ServerBootstrap中</span></span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)<span class="comment">// 设置创建的Channel为NioServerChannel（功能对应JDK NIO的ServerSocketChannel）</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>) <span class="comment">// 配置NioServerSocketChannel的TCP参数</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChildChannelHandler()); <span class="comment">// 绑定IO时间的处理类ChildChannelHandler 用于处理网络I/O事件</span></span><br><span class="line">            <span class="comment">// 绑定端口 同步等待成功</span></span><br><span class="line">            ChannelFuture f = b.bind(port).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待服务端监听端口关闭</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 退出 释放线程池资源</span></span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel arg0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            arg0.pipeline().addLast(<span class="keyword">new</span> LineBasedFrameDecoder(<span class="number">1024</span>));</span><br><span class="line">            arg0.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">            arg0.pipeline().addLast(<span class="keyword">new</span> LineBaseFrameDecoderTimeServerHandler());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8081</span>;</span><br><span class="line">        <span class="keyword">new</span> LineBasedFrameDecoderTimeServer().bind(port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="TimeServerHandler"><a href="#TimeServerHandler" class="headerlink" title="TimeServerHandler"></a>TimeServerHandler</h3><p>​    在此handler中，对接收到的msg就是删除回车换行符后的请求消息，不需要额外考虑处理读半包问题，也不需要对请求消息进行编码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-14 13:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineBaseFrameDecoderTimeServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> counter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String body = (String) msg; <span class="comment">// 接收到的msg就是删除回车换行符后的请求消息，不需要额外考虑处理读半包问题，也不需要对请求消息进行编码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Time server receive order : &quot;</span> + body</span><br><span class="line">            + <span class="string">&quot;; the counter is : &quot;</span> + ++counter);</span><br><span class="line">        String currentTime = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.equalsIgnoreCase(body) ? <span class="keyword">new</span> Date(</span><br><span class="line">                System.currentTimeMillis()).toString() : <span class="string">&quot;BAD ORDER&quot;</span>;</span><br><span class="line">        currentTime = currentTime + System.getProperty(<span class="string">&quot;line.separator&quot;</span>);</span><br><span class="line">        ByteBuf resp = Unpooled.copiedBuffer(currentTime.getBytes());</span><br><span class="line">        ctx.writeAndFlush(resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h2><p>客户端更改与Server端一样。</p>
<h3 id="TimeClient"><a href="#TimeClient" class="headerlink" title="TimeClient"></a>TimeClient</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.LineBasedFrameDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-14 14:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineBasedFrameDecoderTimeClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> port, String host)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//配置客户端NIO线程组</span></span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            b.group(group).channel(NioSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            <span class="keyword">new</span> LineBasedFrameDecoder(<span class="number">1024</span>);</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> LineBaseFrameDecoderTimeClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发起异步连接操作</span></span><br><span class="line">            ChannelFuture f = b.connect(host, port).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待客户端链路关闭</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8081</span>;</span><br><span class="line">        <span class="keyword">new</span> LineBasedFrameDecoderTimeClient().connect(port, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="TimeClientHandler"><a href="#TimeClientHandler" class="headerlink" title="TimeClientHandler"></a>TimeClientHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.toughchow.io.netty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by toughChow</span></span><br><span class="line"><span class="comment"> * 2019-03-14 14:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LineBaseFrameDecoderTimeClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger</span><br><span class="line">            .getLogger(LineBaseFrameDecoderTimeClientHandler.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> counter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] req;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LineBaseFrameDecoderTimeClientHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        req = (<span class="string">&quot;QUERY TIME ORDER&quot;</span> + System.getProperty(<span class="string">&quot;line.separator&quot;</span>))</span><br><span class="line">                .getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.warning(<span class="string">&quot;Unexpected exception : &quot;</span> + cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf message = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            message = Unpooled.buffer(req.length);</span><br><span class="line">            message.writeBytes(req);</span><br><span class="line">            ctx.writeAndFlush(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String body = (String) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;Now is : &quot;</span> + body + <span class="string">&quot; ; the counter is : &quot;</span> + ++counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><p>​    LineBasedFrameDecoder的工作原理是它依次便利ByteBuf中的可读字节，判断是否有<code>\n</code>或者<code>\r\n</code>。如果有 就以此位置为结束位置，从可读索引到结束位置区间的字节就组成了一行。它是以换行符为结束标志的解码器，支持携带结束符或者不携带结束符两种解码方式，同时支持配置当行的最大长度。如果连续读取到最大长度后仍然没有发现换行符，就会抛出异常，同时忽略之前读到的异常码流。</p>
<p>​    StringDecoder的功能就是将接收到的对象转换成字符串，然后继续调用后面的handler。LineBasedFrameDecoder+StringDecoder组合就是按行切换的文本解码器，它被设计用来支持TCP的粘包和拆包。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>http</category>
      </categories>
      <tags>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis:Invalid bound statement (not found)</title>
    <url>/2018/11/17/tools/db/orm-framework/mybatis-Invalid%20bound%20statement%20(not%20found)/</url>
    <content><![CDATA[<h1 id="mybatis–-Invalid-bound-statement-not-found"><a href="#mybatis–-Invalid-bound-statement-not-found" class="headerlink" title="mybatis– Invalid bound statement (not found)"></a>mybatis– Invalid bound statement (not found)</h1><h2 id="异常描述"><a href="#异常描述" class="headerlink" title="异常描述"></a>异常描述</h2><p><code>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found) </code></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在pom.xml文件中的build中添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**<span class="comment">/*.xml&lt;/include&gt;</span></span><br><span class="line"><span class="comment">            &lt;/includes&gt;</span></span><br><span class="line"><span class="comment">            &lt;filtering&gt;false&lt;/filtering&gt;</span></span><br><span class="line"><span class="comment">        &lt;/resource&gt;</span></span><br><span class="line"><span class="comment">&lt;/resources&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
        <category>db</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
</search>
